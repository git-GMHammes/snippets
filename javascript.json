{
  // Place your snippets for javascript here. Each snippet is defined under a snippet name and has a prefix, body and
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
  // same ids are connected.
  // Example:
  // "Print to console": {
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "react-React.useEffect": {
    "prefix": "react-html-funcao-post",
    "body": [
      " ",
      "// React.useEffect",
      "React.useEffect(() => {",
      "    console.log('React.useEffect - Carregar Dados Iniciais');",
      "",
      "    // Função para carregar todos os dados necessários",
      "    const loadData = async () => {",
      "        console.log('loadData iniciando...');",
      "",
      "        try {",
      "            // Chama as funções de fetch para carregar os dados",
      "            await fetchObjeto1();",
      "            await fetchObjeto2();",
      "        } catch (error) {",
      "            console.error('Erro ao carregar dados:', error);",
      "        } finally {",
      "            setIsLoading(false);",
      "        }",
      "    };",
      "",
      "    loadData();",
      "}, []);",
      " "
    ],
    "description": "react-html-funcao-post"
  },
  "react-html-funcao-post": {
    "prefix": "react-html-funcao-post",
    "body": [
      " ",
      "    const fetchData = async (url, data) => {",
      "        try {",
      "            const response = await fetch(url, {",
      "        method: 'POST',",
      "    headers: {",
      "        'Content-Type': 'application/json',",
      "                },",
      "    body: JSON.stringify(data),",
      "            });",
      "    return await response.json();",
      "        } catch (error) {",
      "        console.error('Erro ao enviar dados:', error);",
      "    // Aqui você pode adicionar lógica adicional para exibir o erro para o usuário",
      "    return null;",
      "        }",
      "    };",
      " "
    ],
    "description": "react-html-funcao-post"
  },
  "react-html-funcao-fetch-post": {
    "prefix": "react-html-funcao-fetch-post",
    "body": [
      " ",
      "const fetchData = async (url, data) => {",
      "    try {",
      "        const response = await fetch(url, {",
      "            method: 'POST',",
      "            headers: {",
      "                'Content-Type': 'application/json',",
      "            },",
      "            body: JSON.stringify(data),",
      "        });",
      "        return await response.json();",
      "    } catch (error) {",
      "        console.error('Erro ao enviar dados:', error);",
      "        // Aqui você pode adicionar lógica adicional para exibir o erro para o usuário",
      "        return null;",
      "    }",
      "};",
      " "
    ],
    "description": "react-html-funcao-fetch-post"
  },
  "react-html-funcao-submit": {
    "prefix": "react-html-funcao-submit",
    "body": [
      " ",
      "const submitAllForms = async (apiIdentifier, data) => {",
      "    console.log('Dados a serem enviados:', data);",
      "",
      "    switch (apiIdentifier) {",
      "",
      "        case 'filtro-001':",
      "            console.log('filtro-001');",
      "            const updateData = captureFormData('filtro-001');",
      "            const response = await fetchData(`\\${base_url}/\\${api_url_001}`, updateData);",
      "            if (response && response.result && response.result.affectedRows > 0) {",
      "                console.log('insertID:', response.result.insertID);",
      "                setFormData(prev => ({",
      "                    ...prev,",
      "                    id: response.result.insertID",
      "                }));",
      "                const modal = new bootstrap.Modal(document.getElementById('MensagemSucessoSalvar'));",
      "                modal.show();",
      "            }",
      "            break;",
      "",
      "        case 'filtro-002':",
      "            console.log(apiIdentifier, '- OK');",
      "            const data = captureFormData('filtro-adolescente');",
      "            const responsavelData = await fetchData(`\\${base_url}/\\${api_url_002}`, data);",
      "            if (responsavelData && responsavelData.result && responsavelData.result.dbResponse && responsavelData.result.dbResponse.length > 0) {",
      "                console.log('form-responsavel:', responsavelData.result.dbResponse);",
      "                setResponsaveis(responsavelData.result.dbResponse);",
      "            }",
      "            break;",
      "",
      "        case 'filtro-003':",
      "            console.log(apiIdentifier, '- OK');",
      "            break;",
      "",
      "        default:",
      "            console.log('Identificador de API desconhecido:', apiIdentifier);",
      "            break;",
      "    }",
      "};",
      " "
    ],
    "description": "react-html-funcao-submit"
  },
  "react-html-atualiza-modal": {
    "prefix": "react-html-atualiza-modal",
    "body": [
      " ",
      "    const handleOpenModal = (parameter) => {",
      "        console.log(\"handleOpenModal:\", parameter);",
      "        setFormData(prontuario);",
      "        // Exemplo",
      "        // {apiUrlList.map((select_value, index) => (...",
      "        // <button type=\"button\" className=\"btn btn-outline-primary\" data-bs-toggle=\"modal\" data-bs-target={`#staticBackdropProntuario$${index}`} onClick={() => handleOpenModal(select_value)}>",
      "        //      <i className=\"bi bi-pencil-square\" />",
      "        // </button>",
      "    };",
      " "
    ],
    "description": "react-html-atualiza-modal"
  },
  "react-html-capturar-digita-form": {
    "prefix": "react-html-capturar-digita-form",
    "body": [
      " ",
      "const handleChange = (event) => {",
      "    const { name, value } = event.target;",
      "    setFormData((prev) => ({",
      "        ...prev,",
      "        [name]: value",
      "    }));",
      " ",
      "    // Verifica se a mudança é no campo 'variavel_001'",
      "    if (name === 'variavel_001') {",
      "        console.log('variavel_001');",
      "        // submitAllForms('filtro-api');",
      "    }",
      "};",
      " "
    ],
    "description": "react-html-capturar-digita-form"
  },
  "react-pre-cdn": {
    "prefix": "react-pre-cdn",
    "body": [
      " ",
      "<div>",
      "    {profissionais.map((variavel_value, index) => (",
      "    <div key={index}>",
      "        <pre>{JSON.stringify(variavel_value, null, 2)}</pre>",
      "    </div>",
      "    ))}",
      "</div>",
      " "
    ],
    "description": "react-pre-cdn"
  },
  "script-js-XMLHttpRequest": {
    "prefix": "script-js-XMLHttpRequest",
    "body": [
      "var xmlHttp = new XMLHttpRequest()",
      "if (xmlHttp.readyState === 4 && xmlHttp.status === 200) {",
      "}"
    ],
    "description": "XMLHttpRequest()"
  },
  "script-js-open-GET-POST": {
    "prefix": "script-js-open-GET-POST",
    "body": [
      "var urlAddress = \"www/public/arquivo.php?var1=\" + varJS1 + \"&var2=\" + varJS2",
      "xmlHttp.open(\"GET-POST\", urlAddress, true)",
      "xmlHttp.send()"
    ],
    "description": "Modelo"
  },
  "script-refresh": {
    "prefix": "script-refresh",
    "body": [
      "onClick=\"window.location.reload()\""
    ],
    "description": "Modelo"
  },
  "script-cep-mask": {
    "prefix": "script-cep-mask",
    "body": [
      "$$(\"#cep\").focusout(function() {",
      "  var v_Cep = $$('#cep').val().replace('-', '').replace('.', '');",
      "  console.log(\"alguma coisa\");",
      "  $$.ajax({",
      "      url: 'https://viacep.com.br/ws/' + v_Cep + '/json/',",
      "      dataType: 'json',",
      "      success: function(resposta) {",
      "          $$(\"#logradouro\").val(resposta.logradouro);",
      "          $$(\"#complemento\").val(resposta.complemento);",
      "          $$(\"#bairro\").val(resposta.bairro);",
      "      }",
      "  });",
      "});"
    ],
    "description": "Modelo"
  },
  "script-ajax-table": {
    "prefix": "ajax-table",
    "body": [
      "    $.getJSON(\"https://api.ibge.com.br/municipios\", function(data) {",
      "",
      "        var tabela = $('<table>').addClass('table');",
      "        var cabecalho = $('<thead>').append(",
      "            $('<tr>').append(",
      "                $('<th>').text('UF'),",
      "                $('<th>').text('Código IBGE'),",
      "                $('<th>').text('Código MUNC IBGE'),",
      "                $('<th>').text('Município'),",
      "                $('<th>').text('População'), ",
      "                $('<th>').text('Teste')",
      "            )",
      "        );",
      "",
      "        var corpo = $('<tbody>');",
      "",
      "        data.result.forEach(function(item) {",
      "            var linha = $('<tr>').append(",
      "                $('<td>').text(item.str_uf),",
      "                $('<td>').text(item.str_cod_uf_ibge),",
      "                $('<td>').text(item.str_doc_munc_ibge),",
      "                $('<td>').text(item.str_municipio),",
      "                $('<td>').text(item.str_populacao),",
      "                $('<td>').text(\"Coloca Algo Aqui\")",
      "            );",
      "",
      "            corpo.append(linha);",
      "        });",
      "",
      "        tabela.append(cabecalho).append(corpo);",
      "",
      "        $('#tabela').append(tabela);",
      "    });",
      "<!-- <table id=\"tabela\"></table> -->"
    ],
    "description": "Exemplo de Ajax Recebendo API"
  }
  // "script-modelo": {
  // 	"prefix": "script-modelo",
  // 	"body": [
  // 		""
  // 	],
  // 	"description": "Modelo"
  // },
}