{
    // Place your snippets for php here. Each snippet is defined under a snippet name and has a prefix, body andc4-
    // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    // $$1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
    // same ids are connected.
    // Example:
    // "Print to console": {
    // 	"prefix": "log",
    // 	"body": [
    // 		"console.log('$$1');",
    // 		"$2"
    // 	],
    // 	"description": "Log output to console"
    // }
    "c4-app-Config-Commands.php": {
        "prefix": "c4-estrutura",
        "body": [
            "",
            "namespace Config;",
            "",
            "use CodeIgniter\\CLI\\Commands as CLICommands;",
            "use App\\Commands\\GenerateMigrations;",
            "use App\\Commands\\ImportMigrationsAndData;",
            "",
            "class Commands extends CLICommands",
            "{",
            "    public function init()",
            "    {",
            "        $$this->commands['migrate:generate'] = GenerateMigrations::class;",
            "        $$this->commands['migrate:import'] = ImportMigrationsAndData::class;",
            "    }",
            "}",
            ""
        ],
        "description": "c4-estrutura"
    },
    "c4-app-commands-GenerateMigrations": {
        "prefix": "c4-estrutura",
        "body": [
            "",
            "namespace App\\Commands;",
            "",
            "use CodeIgniter\\CLI\\BaseCommand;",
            "use CodeIgniter\\CLI\\CLI;",
            "use CodeIgniter\\Database\\Config;",
            "",
            "class GenerateMigrations extends BaseCommand",
            "{",
            "    protected $$group = 'Custom';",
            "    protected $$name = 'migrate:generate';",
            "    protected $$description = 'Generate migrations from existing database tables and export data';",
            "",
            "    public function run(array $$params)",
            "    {",
            "        $$db = Config::connect();",
            "        $$tables = $$db->listTables();",
            "",
            "        foreach ($$tables as $$table) {",
            "            $$fields = $$db->getFieldData($$table);",
            "            $$primaryKeys = [];",
            "            $$migrationContent = \"<?php\\n\\n\";",
            "            $$migrationContent .= \"use CodeIgniter\\Database\\Migration;\\n\\n\";",
            "            $$migrationContent .= \"class Create\" . ucfirst($$table) . \" extends Migration\\n\";",
            "            $$migrationContent .= \"{\\n\";",
            "            $$migrationContent .= \"    public function up()\\n\";",
            "            $$migrationContent .= \"    {\\n\";",
            "            $$migrationContent .= \"        \\$$this->forge->addField([\\n\";",
            "",
            "            foreach ($$fields as $$field) {",
            "                $$fieldLine = \"            '{$$field->name}' => [\\n\";",
            "                $$fieldLine .= \"                'type' => '{$$field->type}',\\n\";",
            "",
            "                if ($$field->primary_key) {",
            "                    $$primaryKeys[] = $$field->name;",
            "                }",
            "",
            "                if (isset($$field->max_length)) {",
            "                    $$fieldLine .= \"                'constraint' => {$$field->max_length},\\n\";",
            "                }",
            "",
            "                if ($$field->nullable) {",
            "                    $$fieldLine .= \"                'null' => true,\\n\";",
            "                } else {",
            "                    $$fieldLine .= \"                'null' => false,\\n\";",
            "                }",
            "",
            "                if ($$field->default !== null) {",
            "                    $$fieldLine .= \"                'default' => '{$$field->default}',\\n\";",
            "                }",
            "",
            "                if (isset($$field->auto_increment) && $$field->auto_increment) {",
            "                    $$fieldLine .= \"                'auto_increment' => true,\\n\";",
            "                }",
            "",
            "                if ($$field->name === 'created_at' || $$field->name === 'updated_at') {",
            "                    $$fieldLine .= \"                'default' => NULL,\\n\";",
            "                }",
            "",
            "                $$fieldLine .= \"            ],\\n\";",
            "                $$migrationContent .= $$fieldLine;",
            "            }",
            "",
            "            $$migrationContent .= \"        ]);\\n\";",
            "",
            "            if (!empty($$primaryKeys)) {",
            "                $$migrationContent .= \"        \\$$this->forge->addKey(['\" . implode(\"', '\", $$primaryKeys) . \"'], true);\\n\";",
            "            }",
            "",
            "            $$migrationContent .= \"        \\$$this->forge->createTable('$$table');\\n\";",
            "            $$migrationContent .= \"    }\\n\\n\";",
            "",
            "            $$migrationContent .= \"    public function down()\\n\";",
            "            $$migrationContent .= \"    {\\n\";",
            "            $$migrationContent .= \"        \\$$this->forge->dropTable('$$table');\\n\";",
            "            $$migrationContent .= \"    }\\n\";",
            "            $$migrationContent .= \"}\\n\";",
            "",
            "            $$filePath = APPPATH . 'Database/Migrations/' . date('YmdHis') . '_create_' . $$table . '.php';",
            "            file_put_contents($$filePath, $$migrationContent);",
            "",
            "            CLI::write(\"Migration created for table: $$table\", 'green');",
            "",
            "            // Exportar dados da tabela",
            "            $$query = $$db->query(\"SELECT * FROM $$table\");",
            "            $$data = $$query->getResultArray();",
            "",
            "            if (!empty($$data)) {",
            "                $$dataFileContent = '';",
            "                foreach ($$data as $$row) {",
            "                    $$columns = array_keys($$row);",
            "                    $$values = array_values($$row);",
            "                    $$columns = implode(\", \", array_map(fn($$col) => \"`$$col`\", $$columns));",
            "                    $$values = implode(\", \", array_map(fn($$val) => $$db->escape($$val), $$values));",
            "                    $$dataFileContent .= \"INSERT INTO `$$table` ($$columns) VALUES ($$values);\\n\";",
            "                }",
            "",
            "                $$dataFilePath = APPPATH . 'Database/Migrations/' . date('YmdHis') . '_data_' . $$table . '.sql';",
            "                file_put_contents($$dataFilePath, $$dataFileContent);",
            "",
            "                CLI::write(\"Data export created for table: $$table\", 'green');",
            "            }",
            "        }",
            "    }",
            "}",
            ""
        ],
        "description": "c4-estrutura"
    },
    "c4-app-commands-ImportMigrationsAndData": {
        "prefix": "c4-estrutura",
        "body": [
            "",
            "namespace App\\Commands;",
            "",
            "use CodeIgniter\\CLI\\BaseCommand;",
            "use CodeIgniter\\CLI\\CLI;",
            "use CodeIgniter\\Database\\Config;",
            "",
            "class ImportMigrationsAndData extends BaseCommand",
            "{",
            "    protected $$group = 'Custom';",
            "    protected $$name = 'migrate:import';",
            "    protected $$description = 'Import migrations and data into the database';",
            "",
            "    public function run(array $$params)",
            "    {",
            "        $$db = Config::connect();",
            "        $$migrationPath = APPPATH . 'Database/Migrations/';",
            "",
            "        // Executar Migrations",
            "        CLI::write(\"Executing migrations...\", 'yellow');",
            "        $$this->call('migrate');",
            "",
            "        // Executar Arquivos de Dados",
            "        CLI::write(\"Importing data...\", 'yellow');",
            "        $$dataFiles = glob($$migrationPath . '*.sql');",
            "",
            "        foreach ($$dataFiles as $$dataFile) {",
            "            $$sql = file_get_contents($$dataFile);",
            "            $$db->query($$sql);",
            "        }",
            "",
            "        CLI::write(\"Migrations and data imported successfully.\", 'green');",
            "    }",
            "}",
            ""
        ],
        "description": "c4-estrutura"
    },
    "c4-estrutura": {
        "prefix": "c4-estrutura",
        "body": [
            "// /nome-do-projeto",
            "// |",
            "// |-- app/",
            "// |   |-- Config/",
            "// |   |-- Controllers/",
            "// |   |-- Database/",
            "// |   |-- Filters/",
            "// |   |-- Language/",
            "// |   |-- Libraries/",
            "// |   |-- Models/",
            "// |   |-- ThirdParty/",
            "// |   |-- Validation/",
            "// |   |-- Views/",
            "// |",
            "// |-- public/",
            "// |   |-- .htaccess",
            "// |   |-- index.php",
            "// |   |-- robots.txt",
            "// |   |-- assets/",
            "// |   |-- writable/",
            "// |   |   |-- cache/",
            "// |   |   |-- logs/",
            "// |   |   |-- session/",
            "// |   |   |-- uploads/",
            "// |",
            "// |-- system/",
            "// |   |-- Console/",
            "// |   |-- Database/",
            "// |   |-- Debug/",
            "// |   |-- Helpers/",
            "// |   |-- Language/",
            "// |   |-- ThirdParty/",
            "// |",
            "// |",
            "// |-- tests/",
            "// |",
            "// |-- vendor/",
            "// |",
            "// |-- .env",
            "// |-- spark",
            "// ",
            "// Descrição dos Diretórios e Arquivos",
            "// ",
            "// app/: Contém os arquivos da sua aplicação, como configurações, controllers, models, views, etc.",
            "// public/: Diretório público do seu servidor web. Deve ser o root do seu servidor. Contém o arquivo index.php que é o ponto de entrada para todas as requisições.",
            "// system/: Contém os arquivos core do CodeIgniter. Geralmente, não é necessário modificar nada aqui.",
            "// writable/: Diretório para arquivos que necessitam de permissão de escrita, como logs e caches.",
            "// tests/: Contém os testes automatizados da sua aplicação.",
            "// vendor/: Diretório onde o Composer instala as dependências do projeto.",
            "// .env: Arquivo para definir variáveis de ambiente específicas do seu projeto.",
            "// spark: Script de linha de comando do CodeIgniter que ajuda a executar tarefas como a inicialização de servidores, migrações de banco de dados, etc.",
            "// ",
            " "
        ],
        "description": "c4-estrutura"
    },
    "c4-route-redirect": {
        "prefix": "route-redirect",
        "body": [
            "$$routes->addRedirect('/', '/Projeto/objeto/endpoint/api_endpoint/verbo');",
            " "
        ],
        "description": "route-project"
    },
    "c4-route-project": {
        "prefix": "route-project",
        "body": [
            "$$routes->group('nomeProjeto', function ($$routes) {",
            "    # www/nomeProjeto/objeto/(:any)",
            "    $$routes->group('objeto', function ($$routes) {",
            "        # www/nomeProjeto/objeto/api/(:any)",
            "        $$routes->group('api', function ($$routes) {",
            "            # www/nomeProjeto/objeto/api/(:any)",
            "            $$routes->group('api', function ($$routes) {",
            "                # www/nomeProjeto/objeto/api/criar/(:any)",
            "                $$routes->get('criar', 'ApiController::create_update');",
            "                $$routes->get('criar/(:segment)', 'ApiController::create_update/$$1');",
            "                $$routes->get('criar/(:any)', 'ApiController::create_update/$$1');",
            "                $$routes->post('criar', 'ApiController::create_update');",
            "                $$routes->post('criar/(:any)', 'ApiController::create_update/$$1');",
            "                # www/nomeProjeto/objeto/api/listar/(:any)",
            "                $$routes->get('listar', 'ApiController::dbRead');",
            "                $$routes->get('listar/(:segment)', 'ApiController::dbRead/$$1');",
            "                $$routes->get('listar/(:any)', 'ApiController::dbRead/$$1');",
            "                $$routes->post('listar', 'ApiController::dbRead');",
            "                $$routes->post('listar/(:any)', 'ApiController::dbRead/$$1');",
            "                # www/nomeProjeto/objeto/api/atualizar/(:any)",
            "                $$routes->get('atualizar', 'ApiController::create_update');",
            "                $$routes->get('atualizar/(:segment)', 'ApiController::create_update/$$1');",
            "                $$routes->get('atualizar/(:any)', 'ApiController::create_update/$$1');",
            "                $$routes->post('atualizar', 'ApiController::create_update');",
            "                $$routes->post('atualizar/(:any)', 'ApiController::create_update/$$1');",
            "                # www/nomeProjeto/objeto/api/deletar/(:any)",
            "                $$routes->get('deletar', 'ApiController::dbDelete');",
            "                $$routes->get('deletar/(:segment)', 'ApiController::dbDelete/$$1');",
            "                $$routes->get('deletar/(:any)', 'ApiController::dbDelete/$$1');",
            "                $$routes->post('deletar', 'ApiController::dbDelete');",
            "                $$routes->post('deletar/(:any)', 'ApiController::dbDelete/$$1');",
            "                # www/nomeProjeto/objeto/api/limpar/(:any)",
            "                $$routes->get('limpar', 'ApiController::clear');",
            "                $$routes->get('limpar/(:segment)', 'ApiController::clear/$$1');",
            "                $$routes->get('limpar/(:any)', 'ApiController::clear/$$1');",
            "                $$routes->post('limpar', 'ApiController::clear');",
            "                $$routes->post('limpar/(:any)', 'ApiController::clear/$$1');",
            "            });",
            "            # www/nomeProjeto/objeto/endpoint/(:any)",
            "            $$routes->group('endpoint', function ($$routes) {",
            "                # www/nomeProjeto/objeto/endpoint/criar/(:any)",
            "                $$routes->get('criar', 'EndPointController::dbCreate');",
            "                $$routes->get('criar/(:segment)', 'EndPointController::dbCreate/$$1');",
            "                $$routes->get('criar/(:any)', 'EndPointController::dbCreate/$$1');",
            "                $$routes->post('criar', 'EndPointController::dbCreate');",
            "                $$routes->post('criar/(:any)', 'EndPointController::dbCreate/$$1');",
            "                # www/nomeProjeto/objeto/endpoint/listar/(:any)",
            "                $$routes->get('listar', 'EndPointController::dbRead');",
            "                $$routes->get('listar/(:segment)', 'EndPointController::dbRead/$$1');",
            "                $$routes->get('listar/(:any)', 'EndPointController::dbRead/$$1');",
            "                $$routes->post('listar', 'EndPointController::dbRead');",
            "                $$routes->post('listar/(:any)', 'EndPointController::dbRead/$$1');",
            "                # www/nomeProjeto/objeto/endpoint/atualizar/(:any)",
            "                $$routes->get('atualizar', 'EndPointController::dbUpdate');",
            "                $$routes->get('atualizar/(:segment)', 'EndPointController::dbUpdate/$$1');",
            "                $$routes->get('atualizar/(:any)', 'EndPointController::dbUpdate/$$1');",
            "                $$routes->post('atualizar', 'EndPointController::dbUpdate');",
            "                $$routes->post('atualizar/(:any)', 'EndPointController::dbUpdate/$$1');",
            "                # www/nomeProjeto/objeto/endpoint/deletar/(:any)",
            "                $$routes->get('deletar', 'EndPointController::dbDelete');",
            "                $$routes->get('deletar/(:segment)', 'EndPointController::dbDelete/$$1');",
            "                $$routes->get('deletar/(:any)', 'EndPointController::dbDelete/$$1');",
            "                $$routes->post('deletar', 'EndPointController::dbDelete');",
            "                $$routes->post('deletar/(:any)', 'EndPointController::dbDelete/$$1');",
            "            });",
            "        });",
            "    });",
            "});",
            " "
        ],
        "description": "route-project"
    },
    "c4-route-project-api": {
        "prefix": "route-project-api",
        "body": [
            "# www/qlikreact/licitacao/api/(:any)",
            "$$routes->group('api', function ($$routes) {",
            "    # www/qlikreact/licitacao/api/criar/(:any)",
            "    $$routes->get('criar', 'LicitacoesApiController::create_update');",
            "    $$routes->get('criar/(:segment)', 'LicitacoesApiController::create_update/$$1');",
            "    $$routes->get('criar/(:any)', 'LicitacoesApiController::create_update/$$1');",
            "    $$routes->post('criar', 'LicitacoesApiController::create_update');",
            "    $$routes->post('criar/(:any)', 'LicitacoesApiController::create_update/$$1');",
            "    # www/qlikreact/licitacao/api/listar/(:any)",
            "    $$routes->get('listar', 'LicitacoesApiController::dbRead');",
            "    $$routes->get('listar/(:segment)', 'LicitacoesApiController::dbRead/$$1');",
            "    $$routes->get('listar/(:any)', 'LicitacoesApiController::dbRead/$$1');",
            "    $$routes->post('listar', 'LicitacoesApiController::dbRead');",
            "    $$routes->post('listar/(:any)', 'LicitacoesApiController::dbRead/$$1');",
            "    # www/qlikreact/licitacao/api/atualizar/(:any)",
            "    $$routes->get('atualizar', 'LicitacoesApiController::create_update');",
            "    $$routes->get('atualizar/(:segment)', 'LicitacoesApiController::create_update/$$1');",
            "    $$routes->get('atualizar/(:any)', 'LicitacoesApiController::create_update/$$1');",
            "    $$routes->post('atualizar', 'LicitacoesApiController::create_update');",
            "    $$routes->post('atualizar/(:any)', 'LicitacoesApiController::create_update/$$1');",
            "    # www/qlikreact/licitacao/api/deletar/(:any)",
            "    $$routes->get('deletar', 'LicitacoesApiController::dbDelete');",
            "    $$routes->get('deletar/(:segment)', 'LicitacoesApiController::dbDelete/$$1');",
            "    $$routes->get('deletar/(:any)', 'LicitacoesApiController::dbDelete/$$1');",
            "    $$routes->post('deletar', 'LicitacoesApiController::dbDelete');",
            "    $$routes->post('deletar/(:any)', 'LicitacoesApiController::dbDelete/$$1');",
            "    # www/qlikreact/licitacao/api/limpar/(:any)",
            "    $$routes->get('limpar', 'LicitacoesApiController::clear');",
            "    $$routes->get('limpar/(:segment)', 'LicitacoesApiController::clear/$$1');",
            "    $$routes->get('limpar/(:any)', 'LicitacoesApiController::clear/$$1');",
            "    $$routes->post('limpar', 'LicitacoesApiController::clear');",
            "    $$routes->post('limpar/(:any)', 'LicitacoesApiController::clear/$$1');",
            "});",
            " "
        ],
        "description": "route-project-api"
    },
    "c4-route-project-endpoint": {
        "prefix": "route-project-endpoint",
        "body": [
            "# www/qlikreact/licitacao/endpoint/(:any)",
            "$$routes->group('endpoint', function ($$routes) {",
            "    # www/qlikreact/licitacao/endpoint/criar/(:any)",
            "    $$routes->get('criar', 'LicitacoesEndpointController::dbCreate');",
            "    $$routes->get('criar/(:segment)', 'LicitacoesEndpointController::dbCreate/$$1');",
            "    $$routes->get('criar/(:any)', 'LicitacoesEndpointController::dbCreate/$$1');",
            "    $$routes->post('criar', 'LicitacoesEndpointController::dbCreate');",
            "    $$routes->post('criar/(:any)', 'LicitacoesEndpointController::dbCreate/$$1');",
            "    # www/qlikreact/licitacao/endpoint/listar/(:any)",
            "    $$routes->get('listar', 'LicitacoesEndpointController::dbRead');",
            "    $$routes->get('listar/(:segment)', 'LicitacoesEndpointController::dbRead/$$1');",
            "    $$routes->get('listar/(:any)', 'LicitacoesEndpointController::dbRead/$$1');",
            "    $$routes->post('listar', 'LicitacoesEndpointController::dbRead');",
            "    $$routes->post('listar/(:any)', 'LicitacoesEndpointController::dbRead/$$1');",
            "    # www/qlikreact/licitacao/endpoint/atualizar/(:any)",
            "    $$routes->get('atualizar', 'LicitacoesEndpointController::dbUpdate');",
            "    $$routes->get('atualizar/(:segment)', 'LicitacoesEndpointController::dbUpdate/$$1');",
            "    $$routes->get('atualizar/(:any)', 'LicitacoesEndpointController::dbUpdate/$$1');",
            "    $$routes->post('atualizar', 'LicitacoesEndpointController::dbUpdate');",
            "    $$routes->post('atualizar/(:any)', 'LicitacoesEndpointController::dbUpdate/$$1');",
            "    # www/qlikreact/licitacao/endpoint/deletar/(:any)",
            "    $$routes->get('deletar', 'LicitacoesEndpointController::dbDelete');",
            "    $$routes->get('deletar/(:segment)', 'LicitacoesEndpointController::dbDelete/$$1');",
            "    $$routes->get('deletar/(:any)', 'LicitacoesEndpointController::dbDelete/$$1');",
            "    $$routes->post('deletar', 'LicitacoesEndpointController::dbDelete');",
            "    $$routes->post('deletar/(:any)', 'LicitacoesEndpointController::dbDelete/$$1');",
            "});",
            " "
        ],
        "description": "route-project-endpoint"
    },
    "c4-crypto-md5": {
        "prefix": "c4-crypto-md5",
        "body": [
            "'_' . strtoupper(md5(password_hash(date('Y-m-d H:i:s'), PASSWORD_DEFAULT))),"
        ],
        "description": "Cripgrafar com MD5"
    },
    "c4-paginate-array": {
        "prefix": "c4-paginate-array",
        "body": [
            "    private function paginateArray($$data, $$page, $$perPage)",
            "    {",
            "        // Calcula o offset",
            "        $$offset = ($$page - 1) * $$perPage;",
            "",
            "        // Retorna os itens da página atual",
            "        return array_slice($$data, $$offset, $$perPage);",
            "    }"
        ],
        "description": "Paginate Array"
    },
    "c4-senha-hash": {
        "prefix": "c4-senha-hash",
        "body": [
            "password_hash(\"$var\", PASSWORD_DEFAULT)",
            "password_verify(\"$var\")"
        ],
        "description": "Senha Hash para PHP"
    },
    "c4-controller-apirest": {
        "prefix": "c4-controller-apirest",
        "body": [
            "namespace App\\Controllers;",
            "",
            "use CodeIgniter\\RESTful\\ResourceController;",
            "use CodeIgniter\\API\\ResponseTrait;",
            "// use App\\Models\\NomeModel;",
            "use Exception;",
            "",
            "class NomeController extends ResourceController",
            "{",
            "    use ResponseTrait;",
            "    private $$ModelResponse;",
            "    private $$dbFields;",
            "    private $$uri;",
            "    ",
            "    public function __construct()",
            "    {",
            "        // $$this->ModelResponse = new NomeModel();",
            "        $$this->uri = new \\CodeIgniter\\HTTP\\URI(current_url());",
            "        // helper([",
            "        //'myPrint',",
            "        //'myDate',",
            "        //'myIdUFF',",
            "        //'myFake'",
            "        // ]);",
            "    }",
            "    #",
            "    # route POST /www/sigla/rota",
            "    # route GET /www/sigla/rota",
            "    # Informação sobre o controller",
            "    # retorno do controller [JSON]",
            "    public function index($$parameter = NULL)",
            "    {",
            "        exit('403 Forbidden - Directory access is forbidden.');",
            "        # Parâmentros para receber um POST",
            "        $$request = service('request');",
            "        $$getMethod = $$request->getMethod();",
            "        $$getVar_page = $$request->getVar('page');",
            "        $$processRequest = (array)$$request->getVar();",
            "        $$uploadedFiles = $$request->getFiles();",
            "        $$json = isset($$processRequest['json']) && $$processRequest['json'] == 1 ? 1 : 0;",
            "        // $$processRequest = eagarScagaire($$processRequest);",
            "        #",
            "        try {",
            "                if (isset($$processRequest['id'])) {",
            "                    # CRUD da Model",
            "                    // $$dbResponse[] = $$this->ModelResponse",
            "                    //    ->dBcreate($$processRequest);",
            "                    #",
            "                    // $$dbResponse[] = $$this->ModelResponse",
            "                    //    ->where('id', $$processRequest['id'])",
            "                    //     ->where('deleted_at', NULL)",
            "                    //     ->orderBy('updated_at', 'asc')",
            "                    //     ->dBread()",
            "                    //     ->find();",
            "                    #",
            "                    // $$dbResponse[] = $$this->ModelResponse",
            "                    //     ->dBupdate($$processRequest['id'], $$processRequest);",
            "                    #",
            "                    // $$dbResponse[] = $$this->ModelResponse",
            "                    //     ->where('id', $$processRequest['id'])",
            "                    //     ->dBdelete();",
            "                    #",
            "                } elseif ($$parameter !== NULL) {",
            "                    # CRUD da Model",
            "                    // $$dbResponse[] = $$this->ModelResponse",
            "                    //     ->dBcreate($$processRequest);",
            "                    #",
            "                    // $$dbResponse[] = $$this->ModelResponse",
            "                    //     ->where('id', $$parameter)",
            "                    //     ->where('deleted_at', NULL)",
            "                    //     ->orderBy('updated_at', 'asc')",
            "                    //     ->dBread()",
            "                    //     ->find();",
            "                    #",
            "                    // $$dbResponse[] = $$this->ModelResponse",
            "                    //     ->dBupdate($$parameter, $$processRequest);",
            "                    #",
            "                    // $$dbResponse[] = $$this->ModelResponse",
            "                    //     ->where('id', $$parameter)",
            "                    //     ->dBdelete();",
            "                    #",
            "                } else {",
            "                    // $$dbResponse[] = $$this->ModelResponse",
            "                    //     ->dBcreate($$processRequest);",
            "                    #",
            "                    // $$dbResponse[] = $$this->ModelResponse",
            "                    //     ->where('deleted_at', NULL)",
            "                    //     ->orderBy('updated_at', 'asc')",
            "                    //     ->dBread()",
            "                    //     ->findAll();",
            "                };",
            "                $$apiRespond = [",
            "                    'status' => 'success',",
            "                    'message' => 'API loading data (dados para carregamento da API)',",
            "                    'date' => date('Y-m-d'),",
            "                    'api' => [",
            "                        'version' => '1.0',",
            "                        'method' => isset($$getMethod) ? $$getMethod : 'unknown',",
            "                        'description' => 'API Description',",
            "                        'content_type' => 'application/x-www-form-urlencoded'",
            "                    ],",
            "                    // 'method' => '__METHOD__',",
            "                    // 'function' => '__FUNCTION__',",
            "                    'result' => $$processRequest,",
            "                    'metadata' => [",
            "                        'page_title' => 'Application title',",
            "                        'getURI' => $$this->uri->getSegments(),",
            "                        // Você pode adicionar campos comentados anteriormente se forem relevantes",
            "                        // 'method' => '__METHOD__',",
            "                        // 'function' => '__FUNCTION__',",
            "                        ]",
            "                ];",
            "                $$response = $$this->response->setJSON($$apiRespond, 201);",
            "            } catch (\\Exception $$e) {",
            "                $$apiRespond = array(",
            "                    'message' => array('danger'=>$$e->getMessage()),",
            "                    'page_title' => 'Application title',",
            "                    'getURI' => $$this->uri->getSegments(),",
            "                );",
            "                // $$this->returnFunction(array($$e->getMessage()), 'danger',);",
            "                $$response = $$this->response->setJSON($$apiRespond, 500);",
            "            if ($$json == 1) {",
            "                return $$response;",
            "                // return redirect()->back();",
            "                // return redirect()->to('project/endpoint/parameter/parameter/' . $$parameter);",
            "            } else {",
            "                return $$response;",
            "                // return redirect()->back();",
            "                // return redirect()->to('project/endpoint/parameter/parameter/' . $$parameter);",
            "            }",
            "        }",
            "    }",
            "}",
        ],
        "description": "Classe Controller API completa"
    },
    "c4-controller-endpoint": {
        "prefix": "c4-controller-endpoint",
        "body": [
            "namespace App\\Controllers;",
            "",
            "use CodeIgniter\\RESTful\\ResourceController;",
            "use CodeIgniter\\API\\ResponseTrait;",
            "// use App\\Models\\NomeModel;",
            "use Exception;",
            "",
            "class NomeController extends ResourceController",
            "{",
            "    use ResponseTrait;",
            "    private $$template = 'projeto_view/template/main';",
            "    private $$message = 'projeto_view/message';",
            "    private $$footer = 'projeto_view/footer';",
            "    private $$head = 'projeto_view/head';",
            "    private $$menu = 'projeto_view/menu';",
            "    private $$ModelResponse;",
            "    private $$uri;",
            "    private $$token;",
            "    #",
            "    public function __construct()",
            "    {",
            "        // $$this->ModelResponse = new NomeModel();",
            "        $$this->uri = new \\CodeIgniter\\HTTP\\URI(current_url());",
            "        // $$this->token = isset($$_COOKIE['token']) ? $$_COOKIE['token'] : '123';",
            "    }",
            "    #",
            "    # route POST /www/sigla/rota",
            "    # route GET /www/sigla/rota",
            "    # Informação sobre o controller",
            "    # retorno do controller [view]",
            "    public function index($$parameter = NULL)",
            "    {",
            "        exit('403 Forbidden - Directory access is forbidden.');",
            "        $$request = service('request');",
            "        $$getMethod = $$request->getMethod();",
            "        $$getVar_page = $$request->getVar('page');",
            "        $$processRequest = (array)$$request->getVar();",
            "        // $$processRequest = eagarScagaire($$processRequest);",
            "      $$json = isset($$processRequest['json']) && $$processRequest['json'] == true ? $$processRequest['json'] : false;",
            "      #",
            "        $$loadView = array(",
            "            $$this->head,",
            "            $$this->menu,",
            "            $$this->message,",
            "            $$this->footer,",
            "        );",
            "        try {",
            "            # URI da API                                                                                                          ",
            "            $$endPoint['objeto'] = myEndPoint('index.php/projeto/endereco/api/verbo', '123');",
            "            $$requestJSONform['objeto'] = isset($$endPoint['objeto']['result']) ? $$endPoint['objeto']['result'] : array();",
            "            # Configuração Paginate",
            "            if (isset($$requestJSONform['objeto'])) {",
            "                $$totalItems = count($$requestJSONform['objeto']);",
            "                $$itemsPerPage = 10; // Itens por página",
            "                // $$totalPages = ceil($$totalItems / $$itemsPerPage);",
            "                $$currentPage = isset($$getVar_page) ? $$getVar_page : 1;",
            "                # Constrção Paginate",
            "                $$pager = service('pager');",
            "                $$pager->setPath('intranet/painel/endpoint/master');",
            "                $$pager->makeLinks($$currentPage, $$itemsPerPage, $$totalItems);",
            "                # Finalização Paginate",
            "                $$requestJSONform['objeto']['list'] = $$this->paginateArray($$requestJSONform['objeto'], $$currentPage, $$itemsPerPage);",
            "                $$requestJSONform['objeto']['pager'] = $$pager;",
            "            }",
            "            #",
            "            $$requestJSONform = array();",
            "            $$apiRespond = [",
            "                'status' => 'success',",
            "                'message' => 'API loading data (dados para carregamento da API)',",
            "                'date' => date('Y-m-d'),",
            "                'api' => [",
            "                    'version' => '1.0',",
            "                    'method' => $$getMethod,",
            "                    'description' => 'API Description',",
            "                    'content_type' => 'application/x-www-form-urlencoded'",
            "                ],",
            "                // 'method' => '__METHOD__',",
            "                // 'function' => '__FUNCTION__',",
            "                'result' => $$processRequest,",
            "                'loadView' => $$loadView,",
            "                'metadata' => [",
            "                    'page_title' => 'Application title',",
            "                    'getURI' => $$this->uri->getSegments(),",
            "                    // Você pode adicionar campos comentados anteriormente se forem relevantes",
            "                    // 'method' => '__METHOD__',",
            "                    // 'function' => '__FUNCTION__',",
            "                    ]",
            "            ];",
            "        } catch (\\Exception $$e) {",
            "            $$apiRespond = [",
            "                'status' => 'error',",
            "                'message' => $$e->getMessage(),",
            "                'date' => date('Y-m-d'),",
            "                'api' => [",
            "                    'version' => '1.0',",
            "                    'method' => $$getMethod,",
            "                    'description' => 'API Criar Method',",
            "                    'content_type' => 'application/x-www-form-urlencoded'",
            "                ],",
            "                'metadata' => [",
            "                    'page_title' => 'ERRO - API Method',",
            "                    'getURI' => $$this->uri->getSegments(),",
            "                ]",
            "            ];",
            "        }",
            "        if($$json != 1){",
            "            return $$apiRespond;",
            "        }else{",
            "            return view($$this->template, $$apiRespond);",
            "            // return $$apiRespond;",
            "        }",
            "    }",
            "}",
        ],
        "description": "Classe Controller EndPoint completo"
    },
    "c4-method-create_update": {
        "prefix": "c4-method-create_update",
        "body": [
            "    # route POST /www/crud/api/criar/(:any)",
            "    # route GET /www/crud/api/criar/(:any)",
            "    # route POST /www/crud/api/atualizar/(:any)",
            "    # route GET /www/crud/api/atualizar/(:any)",
            "    # Informação sobre o controller",
            "    # retorno do controller [JSON]",
            "    public function create_update($$parameter = NULL)",
            "    {",
            "        # Parâmentros para receber um POST",
            "        $$request = service('request');",
            "        $$getMethod = $$request->getMethod();",
            "        $$getVar_page = $$request->getVar('page');",
            "        $$processRequest = (array)$$request->getVar();",
            "        // $$uploadedFiles = $$request->getFiles();",
            "        $$token_csrf = (isset($$processRequest['token_csrf']) ? $$processRequest['token_csrf'] : NULL);",
            "        $$json = isset($$processRequest['json']) && $$processRequest['json'] == 1 ? 1 : 0;",
            "        $$choice_update = (isset($$processRequest['id'])) ? (true) : (false);",
            "        // $$processRequest = eagarScagaire($$processRequest);",
            "        #",
            "        // $$processRequest = array();",
            "        try {",
            "            if ($$choice_update === true) {",
            "                if ($$this->validtoken_csrf($$token_csrf)) {",
            "                    $$this->ModelResponse->dbUpdate(",
            "                        $$processRequest['id'],",
            "                        $$this->dbFields($$processRequest)",
            "                    );",
            "                    if ($$this->ModelResponse->affectedRows() > 0) {",
            "                        $$this->returnMyFunction(['Update realizado com sucesso'], 'success');",
            "                        $$processRequestSuccess = true;",
            "                    }",
            "                }",
            "            } elseif ($$choice_update === false) {",
            "                if ($$this->validtoken_csrf($$token_csrf)) {",
            "                    $$this->ModelResponse->dbCreate($$this->dbFields($$processRequest));",
            "                    $$id = ($$this->ModelResponse->affectedRows() > 0) ? ($$this->ModelResponse->insertID()) : (NULL);",
            "                    if ($$this->ModelResponse->affectedRows() > 0) {",
            "                        $$this->returnMyFunction(['Create realizado com sucesso'], 'success');",
            "                        $$processRequestSuccess = true;",
            "                    }",
            "                }",
            "            } else {",
            "                $$this->returnMyFunction(['ERRO: Dados enviados inválidos'], 'danger');",
            "            };",
            "            $$status = (!isset($$processRequestSuccess) || $$processRequestSuccess !== true) ? ('trouble') : ('success');",
            "            $$message = (!isset($$processRequestSuccess) || $$processRequestSuccess !== true) ? ('Erro - requisição que foi bem-formada mas não pôde ser seguida devido a erros semânticos.') : ('API loading data (dados para carregamento da API)');",
            "            $$cod_http = (!isset($$processRequestSuccess) || $$processRequestSuccess !== true) ? (422) : (201);",
            "            $$apiRespond = [",
            "                'status' => $$status,",
            "                'message' => $$message,",
            "                'date' => date('Y-m-d'),",
            "                'api' => [",
            "                    'version' => '1.0',",
            "                    'method' => $$getMethod,",
            "                    'description' => 'API Description',",
            "                    'content_type' => 'application/x-www-form-urlencoded'",
            "                ],",
            "                // 'method' => '__METHOD__',",
            "                // 'function' => '__FUNCTION__',",
            "                'result' => $$processRequest,",
            "                'metadata' => [",
            "                    'page_title' => 'Application title',",
            "                    'getURI' => $$this->uri->getSegments(),",
            "                    // Você pode adicionar campos comentados anteriormente se forem relevantes",
            "                    // 'method' => '__METHOD__',",
            "                    // 'function' => '__FUNCTION__',",
            "                    ]",
            "            ];",
            "            $$response = $$this->response->setJSON($$apiRespond, $$cod_http);",
            "        } catch (\\Exception $$e) {",
            "                $$apiRespond = [",
            "                    'status' => 'error',",
            "                    'message' => $$e->getMessage(),",
            "                    'date' => date('Y-m-d'),",
            "                    'api' => [",
            "                        'version' => '1.0',",
            "                        'method' => isset($$getMethod) ? $$getMethod : 'unknown',",
            "                        'description' => 'API Criar Method',",
            "                        'content_type' => 'application/x-www-form-urlencoded'",
            "                    ],",
            "                    'metadata' => [",
            "                        'page_title' => 'ERRO - API Method',",
            "                        'getURI' => $$this->uri->getSegments(),",
            "                    ]",
            "                ];",
            "            $$response = $$this->response->setJSON($$apiRespond, 500);",
            "        }",
            "        if($$json){",
            "            return $$response;",
            "            // return redirect()->to('project/endpoint/parameter/parameter/' . $$parameter);",
            "        }else{",
            "            return $$response;",
            "            // return redirect()->back();",
            "        }",
            "    }"
        ],
        "description": "API para creator que retorna JSON ou redireciona"
    },
    "c4-method-read": {
        "prefix": "c4-method-read",
        "body": [
            "# route POST /www/sigla/rota",
            "# route GET /www/sigla/rota",
            "# Informação sobre o controller",
            "# retorno do controller [JSON]",
            "public function read($$parameter = NULL)",
            "{",
            "    # Parâmentros para receber um POST",
            "    $$request = service('request');",
            "    $$getMethod = $$request->getMethod();",
            "    $$processRequest = (array)$$request->getVar();",
            "    $$json = isset($$processRequest['json']) && $$processRequest['json'] == 1 ? 1 : 0;",
            "    // $$processRequest = eagarScagaire($$processRequest);",
            "    #",
            "    try {",
            "        if (isset($$processRequest['id'])) {",
            "            // $$dbResponse[] = $$this->ModelResponse",
            "            //    ->where('id', $$processRequest['id'])",
            "            //     ->where('deleted_at', NULL)",
            "            //     ->orderBy('updated_at', 'asc')",
            "            //     ->dBread()",
            "            //     ->find();",
            "            #",
            "        } elseif ($$parameter !== NULL) {",
            "            // $$dbResponse[] = $$this->ModelResponse",
            "            //     ->where('id', $$parameter)",
            "            //     ->where('deleted_at', NULL)",
            "            //     ->orderBy('updated_at', 'asc')",
            "            //     ->dBread()",
            "            //     ->find();",
            "            #",
            "        } else {",
            "            // $$dbResponse[] = $$this->ModelResponse",
            "            //     ->where('deleted_at', NULL)",
            "            //     ->orderBy('updated_at', 'asc')",
            "            //     ->dBread()",
            "            //     ->findAll();",
            "        };",
            "        $$apiRespond = [",
            "            'status' => 'success',",
            "            'message' => 'API loading data (dados para carregamento da API)',",
            "            'date' => date('Y-m-d'),",
            "            'api' => [",
            "                'version' => '1.0',",
            "                'method' => $$getMethod,",
            "                'description' => 'API Description',",
            "                'content_type' => 'application/x-www-form-urlencoded'",
            "            ],",
            "            // 'method' => '__METHOD__',",
            "            // 'function' => '__FUNCTION__',",
            "            'result' => $$processRequest,",
            "            'metadata' => [",
            "                'page_title' => 'Application title',",
            "                'getURI' => $$this->uri->getSegments(),",
            "                // Você pode adicionar campos comentados anteriormente se forem relevantes",
            "                // 'method' => '__METHOD__',",
            "                // 'function' => '__FUNCTION__',",
            "                ]",
            "        ];",
            "        $$response = $$this->response->setJSON($$apiRespond, 201);",
            "    } catch (\\Exception $$e) {",
            "            $$apiRespond = [",
            "                'status' => 'error',",
            "                'message' => $$e->getMessage(),",
            "                'date' => date('Y-m-d'),",
            "                'api' => [",
            "                    'version' => '1.0',",
            "                    'method' => $$getMethod,",
            "                    'description' => 'API Criar Method',",
            "                    'content_type' => 'application/x-www-form-urlencoded'",
            "                ],",
            "                'metadata' => [",
            "                    'page_title' => 'ERRO - API Method',",
            "                    'getURI' => $$this->uri->getSegments(),",
            "                ]",
            "            ];",
            "            $$response = $$this->response->setJSON($$apiRespond, 500);",
            "    }",
            "    if($$json == 1){",
            "        return $$response;",
            "        // return redirect()->to('project/endpoint/parameter/parameter/' . $$parameter);",
            "    }else{",
            "        return $$response;",
            "        // return redirect()->back();",
            "    }",
            "}"
        ],
        "description": "Validação do Token para o formulário"
    },
    "c4-method-apirest": {
        "prefix": "c4-method-apirest",
        "body": [
            "# route POST /www/sigla/rota",
            "# route GET /www/sigla/rota",
            "# Informação sobre o controller",
            "# retorno do controller [JSON]",
            "public function onRest($$parameter = NULL)",
            "{",
            "    # Parâmentros para receber um POST",
            "    $$request = service('request');",
            "    $$getMethod = $$request->getMethod();",
            "    $$processRequest = (array)$$request->getVar();",
            "    $$json = isset($$processRequest['json']) && $$processRequest['json'] == 1 ? 1 : 0;",
            "    // $$processRequest = eagarScagaire($$processRequest);",
            "    #",
            "    try {",
            "        if (isset($$processRequest['id'])) {",
            "            # CRUD da Model",
            "            // $$dbResponse[] = $$this->ModelResponse",
            "            //    ->dBcreate($$processRequest);",
            "            #",
            "            // $$dbResponse[] = $$this->ModelResponse",
            "            //    ->where('id', $$processRequest['id'])",
            "            //     ->where('deleted_at', NULL)",
            "            //     ->orderBy('updated_at', 'asc')",
            "            //     ->dBread()",
            "            //     ->find();",
            "            #",
            "            // $$dbResponse[] = $$this->ModelResponse",
            "            //     ->dBupdate($$processRequest['id'], $$processRequest);",
            "            #",
            "            // $$dbResponse[] = $$this->ModelResponse",
            "            //     ->where('id', $$processRequest['id'])",
            "            //     ->dBdelete();",
            "            #",
            "        } elseif ($$parameter !== NULL) {",
            "            # CRUD da Model",
            "            // $$dbResponse[] = $$this->ModelResponse",
            "            //     ->dBcreate($$processRequest);",
            "            #",
            "            // $$dbResponse[] = $$this->ModelResponse",
            "            //     ->where('id', $$parameter)",
            "            //     ->where('deleted_at', NULL)",
            "            //     ->orderBy('updated_at', 'asc')",
            "            //     ->dBread()",
            "            //     ->find();",
            "            #",
            "            // $$dbResponse[] = $$this->ModelResponse",
            "            //     ->dBupdate($$parameter, $$processRequest);",
            "            #",
            "            // $$dbResponse[] = $$this->ModelResponse",
            "            //     ->where('id', $$parameter)",
            "            //     ->dBdelete();",
            "            #",
            "        } else {",
            "            // $$dbResponse[] = $$this->ModelResponse",
            "            //     ->dBcreate($$processRequest);",
            "            #",
            "            // $$dbResponse[] = $$this->ModelResponse",
            "            //     ->where('deleted_at', NULL)",
            "            //     ->orderBy('updated_at', 'asc')",
            "            //     ->dBread()",
            "            //     ->findAll();",
            "        };",
            "        $$apiRespond = [",
            "            'status' => 'success',",
            "            'message' => 'API loading data (dados para carregamento da API)',",
            "            'date' => date('Y-m-d'),",
            "            'api' => [",
            "                'version' => '1.0',",
            "                'method' => $$getMethod,",
            "                'description' => 'API Description',",
            "                'content_type' => 'application/x-www-form-urlencoded'",
            "            ],",
            "            // 'method' => '__METHOD__',",
            "            // 'function' => '__FUNCTION__',",
            "            'result' => $$processRequest,",
            "            'metadata' => [",
            "                'page_title' => 'Application title',",
            "                'getURI' => $$this->uri->getSegments(),",
            "                // Você pode adicionar campos comentados anteriormente se forem relevantes",
            "                // 'method' => '__METHOD__',",
            "                // 'function' => '__FUNCTION__',",
            "                ]",
            "            ];",
            "            $$response = $$this->response->setJSON($$apiRespond, 201);",
            "        } catch (\\Exception $$e) {",
            "            $$apiRespond = array(",
            "                'message' => array('danger'=>$$e->getMessage()),",
            "                'page_title' => 'Application title',",
            "                'getURI' => $$this->uri->getSegments(),",
            "            );",
            "            // $$this->returnFunction(array($$e->getMessage()), 'danger',);",
            "            $$response = $$this->response->setJSON($$apiRespond, 500);",
            "        }",
            "        if ($$json == 1) {",
            "            return $$response;",
            "            // return redirect()->back();",
            "            // return redirect()->to('project/endpoint/parameter/parameter/' . $$parameter);",
            "        } else {",
            "            return $$response;",
            "        }",
            "}",
        ],
        "description": "Modelo de Consumo e API"
    },
    "c4-method-endpoint": {
        "prefix": "c4-method-endpoint",
        "body": [
            "    # Consumo de API",
            "    # route GET /www/sigla/rota",
            "    # route POST /www/sigla/rota",
            "    # Informação sobre o controller",
            "    # retorno do controller [VIEW]",
            "    public function displayAPI($$parameter = NULL)",
            "    {",
            "        // $$this->token_csrf();",
            "        $$request = service('request');",
            "        $$getMethod = $$request->getMethod();",
            "        $$getVar_page = $$request->getVar('page');",
            "        $$processRequest = (array)$$request->getVar();",
            "        $$json = isset($$processRequest['json']) && $$processRequest['json'] == 1? 1 : 0;",
            "        $$id = (isset($$processRequest['id'])) ? ('/' . $$processRequest['id']) : ('/' . $$parameter);",
            "        // $$processRequest = eagarScagaire($$processRequest);",
            "        #",
            "        $$loadView = array(",
            "            $$this->head,",
            "            $$this->menu,",
            "            $$this->message,",
            "            $$this->footer,",
            "        );",
            "        try {",
            "            # URI da API                                                                                                          ",
            "            $$endPoint['objeto'] = myEndPoint('index.php/projeto/endereco/api/verbo', '123');",
            "            $$requestJSONform['objeto'] = isset($$endPoint['objeto']['result']) ? $$endPoint['objeto']['result'] : array();",
            "            # Configuração Paginate",
            "            $$totalItems = count($$requestJSONform['objeto']);",
            "            $$itemsPerPage = 10; // Itens por página",
            "            // $$totalPages = ceil($$totalItems / $$itemsPerPage);",
            "            $$currentPage = isset($$getVar_page) ? $$getVar_page : 1;",
            "            # Constrção Paginate",
            "            $$pager = service('pager');",
            "            $$pager->setPath('intranet/painel/endpoint/master');",
            "            $$pager->makeLinks($$currentPage, $$itemsPerPage, $$totalItems);",
            "            # Finalização Paginate",
            "            $$requestJSONform['objeto']['list'] = $$this->paginateArray($$requestJSONform['objeto'], $$currentPage, $$itemsPerPage);",
            "            $$requestJSONform['objeto']['pager'] = $$pager;",
            "            #",
            "            $$requestJSONform = array();",
            "            $$apiRespond = [",
            "                'status' => 'success',",
            "                'message' => 'API loading data (dados para carregamento da API)',",
            "                'date' => date('Y-m-d'),",
            "                'api' => [",
            "                    'version' => '1.0',",
            "                    'method' => $$getMethod,",
            "                    'description' => 'API Description',",
            "                    'content_type' => 'application/x-www-form-urlencoded'",
            "                ],",
            "                // 'method' => '__METHOD__',",
            "                // 'function' => '__FUNCTION__',",
            "                'result' => $$processRequest,",
            "                'loadView' => $$loadView,",
            "                'metadata' => [",
            "                    'page_title' => 'Application title',",
            "                    'getURI' => $$this->uri->getSegments(),",
            "                    // Você pode adicionar campos comentados anteriormente se forem relevantes",
            "                    // 'method' => '__METHOD__',",
            "                    // 'function' => '__FUNCTION__',",
            "                    ]",
            "            ];",
            "            if($$json == 1){",
            "                $$response = $$this->response->setJSON($$apiRespond, 201);",
            "            }",
            "        } catch (\\Exception $$e) {",
            "            $$apiRespond = [",
            "                'status' => 'error',",
            "                'message' => $$e->getMessage(),",
            "                'date' => date('Y-m-d'),",
            "                'api' => [",
            "                    'version' => '1.0',",
            "                    'method' => $$getMethod,",
            "                    'description' => 'API Criar Method',",
            "                    'content_type' => 'application/x-www-form-urlencoded'",
            "                ],",
            "                'metadata' => [",
            "                    'page_title' => 'ERRO - API Method',",
            "                    'getURI' => $$this->uri->getSegments(),",
            "                ]",
            "            ];",
            "            if($$json == 1){",
            "                $$response = $$this->response->setJSON($$apiRespond, 500);",
            "            }",
            "        }",
            "        if($$json == 1){",
            "            return $$apiRespond;",
            "        }else{",
            "            return $$apiRespond;",
            "            // return view($$this->template, $$apiRespond);",
            "        }",
            "    }",
        ],
        "description": "Modelo de Consumo e EndPoint"
    },
    "c4-controller-paginateArray": {
        "prefix": "c4-controller-paginateArray",
        "body": [
            "    private function paginateArray($$data, $$page, $$perPage)",
            "    {",
            "        // Calcula o offset",
            "        $$offset = ($$page - 1) * $$perPage;",
            "",
            "        // Retorna os itens da página atual",
            "        return array_slice($$data, $$offset, $$perPage);",
            "    }"
        ],
        "description": "Função que calcula o Paginate"
    },
    "c4-controller-dbFields": {
        "prefix": "c4-method-dbFields",
        "body": [
            "private function dbFields($$processRequestFields = array())",
            "{",
            "    $$dbCreate = array();",
            "    (isset($$processRequestFields['fieldForm'])) ? ($$dbCreate['fieldDb01'] = $$processRequestFields['fieldForm']) : (NULL);",
            "    (isset($$processRequestFields['fieldForm'])) ? ($$dbCreate['fieldDb02'] = $$processRequestFields['fieldForm']) : (NULL);",
            "    (isset($$processRequestFields['fieldForm'])) ? ($$dbCreate['fieldDb03'] = $$processRequestFields['fieldForm']) : (NULL);",
            "    (isset($$processRequestFields['fieldForm'])) ? ($$dbCreate['fieldDb04'] = $$processRequestFields['fieldForm']) : (NULL);",
            "    (isset($$processRequestFields['fieldForm'])) ? ($$dbCreate['fieldDb05'] = $$processRequestFields['fieldForm']) : (NULL);",
            "    (isset($$processRequestFields['fieldForm'])) ? ($$dbCreate['fieldDb06'] = $$processRequestFields['fieldForm']) : (NULL);",
            "    (isset($$processRequestFields['fieldForm'])) ? ($$dbCreate['fieldDb07'] = $$processRequestFields['fieldForm']) : (NULL);",
            "    (isset($$processRequestFields['created_at'])) ? ($$dbCreate['created_at'] = $$processRequestFields['created_at']) : (NULL);",
            "    (isset($$processRequestFields['updated_at'])) ? ($$dbCreate['updated_at'] = $$processRequestFields['updated_at']) : (NULL);",
            "    return ($$dbCreate);",
            "}"
        ],
        "description": "Dicionário de dados para a camada model"
    },
    "c4-endpoint-token_csrf": {
        "prefix": "c4-endpoint-token_csrf",
        "body": [
            "    private function token_csrf()",
            "    {",
            "        $$token_csrf = myUCI();",
            "        session()->set('token_csrf',  $$token_csrf);",
            "        session()->markAsTempdata('token_csrf', 1800);",
            "        // myPrint($$token_csrf, 'www\\oficina\\app\\Controllers\\CustomersEndPointController.php', true);",
            "        return $$token_csrf;",
            "    }"
        ],
        "description": "Validação do Token para o formulário"
    },
    "c4-api-validtoken_csrf": {
        "prefix": "c4-api-validtoken_csrf",
        "body": [
            "private function validtoken_csrf($$token)",
            "    {",
            "        if($$token = '$$2y$10$wB9i/CRwduLN0lgDED2jR.UrpxAw1eHBThgNYG.xfBfrhHr8IBOY2'){",
            "            return true;",
            "        }",
            "        if (session()->get('token_csrf')) {",
            "            $$token_csrf = session()->get('token_csrf');",
            "        } else {",
            "            $$token_csrf = 'FALSE';",
            "    }",
            "        if ($$token_csrf == $$token) {",
            "            return true;",
            "    }     else {",
            "          return false;",
            "    }",
            "}"
        ],
        "description": "Validação do Token para o formulário"
    },
    "c4-controller-mensagem": {
        "prefix": "c4-method-mensagem",
        "body": [
            "    private function returnMyFunction($$message = array(), $$typeMessage, $$dataValue = array())",
            "    {",
            "        // ['success', 'warning', 'danger'];",
            "        if (session()->get('message')) {",
            "            $$recebe = session()->get('message');",
            "            foreach ($$recebe as $$key_recebe => $$value_recebe) {",
            "                $$message[] = $$value_recebe;",
            "            }",
            "            // myPrint($$message, 'src\\app\\Controllers\\APMEtapaApiController.php', true);",
            "        }",
            "        #",
            "        if ($$message !== array()) {",
            "            $$message['message'][$$typeMessage] = $$message;",
            "            session()->set('message', $$message);",
            "            session()->markAsTempdata('message', 5);",
            "        }",
            "        #",
            "        if ($$dataValue !== array()) {",
            "            session()->set('value_form', $$dataValue);",
            "        }",
            "        session()->markAsTempdata(",
            "            'message',",
            "            5",
            "        );",
            "        return (NULL);",
            "    }"
        ],
        "description": "Validação do Token para o formulário"
    },
    "c4-ci4-try-cat": {
        "prefix": "c4-ci4-try-cat",
        "body": [
            "",
            "try {",
            "    //code...",
            "}catch (\\Exception $$e) {",
            "    $$this->message->message(['ERRO: ' . $$e->getMessage()], 'danger');",
            "}"
        ],
        "description": "Try Cat"
    },
    "c4-ci4-session": {
        "prefix": "c4-ci4-session",
        "body": [
            "    $$apiRespond = array(",
            "    'name_session' => '',",
            "    'time_in_seconds' => 10",
            "    );",
            "    #",
            "    session()->set($$apiRespond['name_session'],  $$apiRespond);",
            "    session()->markAsTempdata($$apiRespond['name_session'], $$apiRespond['time_in_seconds']);",
            "    #",
            "    if (session()->get('name_session')) {",
            "    $$apiSession = session()->get('name_session');",
            "    //  myPrint($$apiSession, '', true);",
            "    }",
            "    $$varSession = (session()->get('session_name'))?(session()->get('session_name')):(array());"
        ],
        "description": "Sessão para CI3"
    },
    "c4-model-head": {
        "prefix": "c4-model-head",
        "body": [
            "namespace App\\Models;",
            "",
            "use CodeIgniter\\Database\\Query;",
            "use CodeIgniter\\Model;",
            "// use App\\Controllers\\SystemMessageController;",
            "// use system\\Database\\Exceptions\\DatabaseException;",
            "",
            "class TabelaModel extends Model",
            "{",
            "",
            "    protected $$DBGroup = 'GRUPO_DB_CONFIG';",
            "",
            "    protected $$table = 'tabela_banco_dados';",
            "    protected $$primaryKey = 'id';",
            "    protected $$useAutoIncrement = true;",
            "    protected $$returnType = 'array';",
            "    protected $$allowedFields = [];",
            "    protected $$validationRules = [];",
            "    protected $$validationMessages = [];",
            "    protected $$skipValidation     = false;",
            "",
            "    protected $$useTimestamps = false;",
            "    protected $$createdField  = 'created_at';",
            "    protected $$updatedField  = 'updated_at';",
            "    protected $$deletedField  = 'deleted_at';",
            "",
            "    protected $$dbInsert;",
            "    protected $$dbReplace;",
            "    protected $$dbRead;",
            "    protected $$affectedRows;",
            "    // protected $$message;",
            "",
            "}"
        ],
        "description": "Inicio da Model"
    },
    "c4-model-column": {
        "prefix": "c4-model-column",
        "body": [
            "    public function getColumnsFromTable($$table_name, $$parameter1 = 'column', $$parameter2 = 'value_type', $$parameter3 = 'value_key')",
            "    {",
            "    $$getTable = array();",
            "        # input: getColumnsFromTable('tab_link', 'column', 'type', 'key')",
            "        if ($$parameter1 == 'column' && $$parameter2 == 'value_type' && $$parameter3 == 'value_key') {",
            "            $$query = $$this->query(\"SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = '$$table_name';\");",
            "            foreach ($$query->getResultArray() as $$key => $$value_columns) {",
            "                $$getTable['COLUMN'][] = $$value_columns['COLUMN_NAME'];",
            "        }",
            "    } elseif ($$parameter1 == 'column' && $$parameter2 == 'type' && $$parameter3 == 'value_key') {",
            "        $$query = $$this->query(\"SELECT COLUMN_NAME, DATA_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = '$$table_name';\");",
            "        foreach ($$query->getResultArray() as $$key => $$value_columns) {",
            "        $$getTable['COLUMN'][] = $$value_columns['COLUMN_NAME'] . ', ' . $$value_columns['DATA_TYPE'];",
            "    }",
            "    } elseif ($$parameter1 == 'column' && $$parameter2 == 'type' && $$parameter3 == 'key') {",
            "    $$query = $$this->query(\"SELECT COLUMN_NAME, DATA_TYPE, COLUMN_KEY FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = '$$table_name';\");",
            "    foreach ($$query->getResultArray() as $$key => $$value_columns) {",
            "        $$getTable['COLUMN'][] = $$value_columns['COLUMN_NAME'] . ', ' . $$value_columns['DATA_TYPE'] . ', ' . $$value_columns['COLUMN_KEY'];",
            "    }",
            "    }",
            "return $$getTable;",
            "}"
        ],
        "description": "Revela Nome, Tipo e Chave das colunas no banco de dados"
    },
    "c4-model-dbcreate": {
        "prefix": "c4-model-dbcreate",
        "body": [
            "public function dbCreate($$dbCreate)",
            "{",
            "    // $$this->message = new SystemMessageController();",
            "    try {",
            "        $$this->allowedFields = array_keys($$dbCreate);",
            "        $$this->dbInsert = $$this->insert($$dbCreate);",
            "        $$this->affectedRows = $$this->db->affectedRows();",
            "        if ($$this->affectedRows > 0) {",
            "            $$this->message->message(['Cadastro realizado com sucesso'], 'danger', $$dbCreate, 5);",
            "        }",
            "    } catch (\\Throwable $$th) {",
            "        if (DEBUG_MY_PRINT) {",
            "            // myPrint($$th->getMessage(), 'src/app/Models/.php');",
            "        }",
            "        // $$this->message->message([$$th->getMessage()], 'danger', $$dbCreate, 5);",
            "    }",
            "    return $$this;",
            "}"
        ],
        "description": "Modelo creat de Consumo e API"
    },
    "c4-model-dbread": {
        "prefix": "c4-model-dbread",
        "body": [
            "public function dbRead($$keyVariable = NULL, $$keyValue = NULL)",
            "{",
            "   // $$this->message = new SystemMessageController();",
            "   $$getColumnsFromTable = array();",
            "   // $$getColumnsFromTable = $$this->getColumnsFromTable($$this->table)['COLUMN'];",
            "   $$this->allowedFields = $$getColumnsFromTable;",
            "   // myPrint($$getColumnsFromTable, 'src/app/Models/ComCategoriaModel.php');",
            "   #",
            "   try {",
            "       if ($$keyVariable !== NULL && $$keyValue !== NULL) {",
            "           $$this->dbRead = $$this->where($$keyVariable, $$keyValue);",
            "       } elseif ($$keyVariable !== NULL && $$keyValue == NULL) {",
            "           $$this->dbRead = $$this->select($$this->allowedFields);",
            "       } else {",
            "           $$this->dbRead = $$this->select($$this->allowedFields);",
            "   }",
            "   $$this->affectedRows = $$this->db->affectedRows();",
            "   } catch (\\Throwable $$th) {",
            "        if (DEBUG_MY_PRINT) {",
            "            // myPrint($$th->getMessage(), 'src/app/Models/.php');",
            "        }",
            "        // $$this->message->message([$$th->getMessage()], 'danger', $$this->dbRead, 5);",
            "   }",
            "   return $$this;",
            "}"
        ],
        "description": "Modelo read de Consumo e API"
    },
    "c4-model-dbUpdate": {
        "prefix": "c4-model-dbUpdate",
        "body": [
            "public function dbUpdate($$key, $$dbUpdate)",
            "{",
            "   // $$this->message = new SystemMessageController();",
            "    if (",
            "        isset($$dbUpdate)",
            "    ) {",
            "        $$this->allowedFields = array_keys($$dbUpdate);",
            "        // myPrint($$this->allowedFields, true);",
            "    }",
            "    try {",
            "        if (",
            "            isset($$key)",
            "            && is_array($$key)",
            "            && isset($$dbUpdate)",
            "        ) {",
            "            // Configura a atualização",
            "            $$this->set($$dbUpdate);",
            "            $$this->where($$key);",
            "            $$this->update();",
            "        } else {",
            "            $$this->update($$key, $$dbUpdate);",
            "        }",
            "        $$this->affectedRows = $$this->db->affectedRows();",
            "        if ($$this->affectedRows > 0) {",
            "            // $$this->message->message(['Atualização realizada com sucesso'], 'success', $$dbUpdate, 5);",
            "        } else {",
            "            // $$this->message->message(['Não foi possível realizar a atualização'], 'warning', $$dbUpdate, 5);",
            "        }",
            "    } catch (\\Throwable $$th) {",
            "        if (DEBUG_MY_PRINT) {",
            "            // myPrint($$th->getMessage(), 'src/app/Models/.php');",
            "        }",
            "        // $$this->message->message([$$th->getMessage()], 'danger', $$dbUpdate, 5);",
            "    }",
            "    return $$this;",
            "}"
        ],
        "description": "Modelo Update de Consumo e API"
    },
    "c4-model-dbDelete": {
        "prefix": "c4-model-dbDelete",
        "body": [
            "public function dBdelete()",
            "{",
            "   // $$this->message = new SystemMessageController();",
            "",
            "    try {",
            "        $$this->delete();", 
            "    } catch (\\Throwable $$th) {",
            "        if (DEBUG_MY_PRINT) {",
            "            // myPrint($$th->getMessage(), 'src/app/Models/.php');",
            "        }",
            "        // $$this->message->message([$$th->getMessage()], 'danger', $$dbUpdate, 5);",
            "    }",
            "    return $$this;",
            "}"
        ],
        "description": "Modelo delte de Consumo e API"
    },
    "c4-form-multipart": {
        "prefix": "c4-form-multipart",
        "body": [
            "<?= form_open_multipart('controller/method', 'class=\"was-validated\"'); ?>",
            "<?= form_close(\"&nbsp;\"); ?>"
        ],
        "description": "Fomulários para Codeigniter 4"
    },
    "c4-form-label": {
        "prefix": "c4-form-label",
        "body": [
            "$$_subtitle__label = [",
            "    'label_text' => '_Label_',",
            "    'id' => '_subtitle_',",
            "    'attributes' => [",
            "'class' => 'form-label label-left'",
            "    ]",
            "];"
        ],
        "description": "Fomulários para Codeigniter 4"
    },
    "c4-form-dropdown": {
        "prefix": "c4-form-dropdown",
        "body": [
            "$$_subtitle_ = [",
            "    'name' => '_subtitle_',",
            "    'options' => [",
            "'001' => 'valor 1',",
            "'002' => 'valor 2',",
            "'003' => 'valor 3',",
            "'004' => 'valor 4',",
            "'005' => 'valor 5',",
            "    ],",
            "    'selected' => '003',",
            "    'extra' => [",
            "'class' => 'form-control form-control-sm',",
            "'id' => '_subtitle_',",
            "// 'readonly' => 'readonly'",
            "    ]",
            "];"
        ],
        "description": "Fomulários para Codeigniter 4"
    },
    "c4-form-textarea": {
        "prefix": "c4-form-textarea",
        "body": [
            "$$_subtitle_ = [",
            "    'data' => [",
            "'name'  => '_subtitle_',",
            "'id'    => '_subtitle_',",
            "'value' => set_value('_subtitle_', 'Descreva os detalhes'),",
            "'maxlength' => '255',",
            "'class' => 'form-control form-control-sm'",
            "    ],",
            "    'Message_required_field' => 'Campo _Label_ é Obrigatório',",
            "];"
        ],
        "description": "Fomulários para Codeigniter 4"
    },
    "c4-form-input": {
        "prefix": "c4-form-input",
        "body": [
            "$$_subtitle_ = [",
            "    'data' => [",
            "'type' => 'text',",
            "// 'type' => 'hidden',",
            "// 'type' => 'date',",
            "// 'type' => 'email',",
            "// 'type' => 'number',",
            "'name' => '_subtitle_',",
            "'id' => '_subtitle_',",
            "'class' => 'form-control form-control-sm',",
            "'maxlength' => '100',",
            "'placeholder' => '_Label_',",
            "// 'min' => date('Y-m-d'),",
            "// 'max' => '2023-12-31',",
            "// 'disabled' => 'disabled'",
            "// 'readonly' => 'readonly'",
            "'required' => 'required'",
            "    ],",
            "    'field' => '_subtitle_',",
            "    'default' => '_Label_',",
            "    'html_escape' => true,",
            "    'escape' => true,",
            "    'Message_required_field' => 'Campo _Label_ Obrigatório',",
            "    'with_set' => true",
            "];"
        ],
        "description": "Fomulários para Codeigniter 4"
    },
    "c4-form-password": {
        "prefix": "c4-form-password",
        "body": [
            "$$_subtitle_ = [",
            "    'data' => [",
            "'name' => '_subtitle_',",
            "'id' => '_subtitle_',",
            "'class' => 'form-control form-control-sm',",
            "'required' => 'required'",
            "    ],",
            "    'value' => '******',",
            "    'escape' => true",
            "];"
        ],
        "description": "Fomulários para Codeigniter 4"
    },
    "c4-form-radio": {
        "prefix": "c4-form-radio",
        "body": [
            "$$_subtitle_ = [",
            "    'data' => [",
            "'name' => '_subtitle_',",
            "'id' => '_subtitle_',",
            "'value' => '_Label_',",
            "// 'class' => 'form-control form-control-sm',",
            "'checked' => FALSE",
            "    ],",
            "    'escape' => true,",
            "    'set' => [",
            "'label' => '_response_',",
            "    ]",
            "];"
        ],
        "description": "Fomulários para Codeigniter 4"
    },
    "c4-isset": {
        "prefix": "c4-isset",
        "body": [
            "(isset($$var)) ? (NULL) : (NULL);"
        ],
        "description": "Fomulários para Codeigniter 4"
    },
    "c4-form-checkbox": {
        "prefix": "c4-form-checkbox",
        "body": [
            "$$subtitle = [",
            " 'data' => [",
            "   'name' => 'subtitle',",
            "   'id' => 'subtitle'",
            "   'class' => 'form-control form-control-sm',",
            "   ],",
            " 'value' => $$value,",
            " 'checked' => false,",
            " 'escape' => true",
            "];"
        ],
        "description": "Fomulários para Codeigniter 4"
    },
}