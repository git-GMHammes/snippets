{
  // Place your snippets for php here. Each snippet is defined under a snippet name and has a prefix, body andsnippets-
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
  // same ids are connected.
  // Example:
  // "Print to console": {
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }

  "snippets-controller-apirest": {
    "prefix": "snippets-controller-apirest",
    "body": [
      "namespace App\\Controllers;",
      "",
      "use CodeIgniter\\RESTful\\ResourceController;",
      "use CodeIgniter\\API\\ResponseTrait;",
      "// use App\\Models\\NomeModel;",
      "use Exception;",
      "",
      "class NomeController extends ResourceController",
      "{",
      "    use ResponseTrait;",
      "    private $$ModelResponse;",
      "    private $$uri;",
      "    //private $$template = 'template/main.php';",
      "",
      "    public function __construct()",
      "    {",
      "        // $$this->ModelResponse = new NomeModel();",
      "        $$this->uri = new \\CodeIgniter\\HTTP\\URI(current_url());",
      "//        helper([",
      "//            'myPrint',",
      "//            'myEndPoint',",
      "//            'myDate',",
      "//            'myIdUFF',",
      "//            'form',",
      "//            'myFake'",
      "//        ]);",
      "        return NULL;",
      "    }",
      "",
      "    # route POST /www/sigla/rota",
      "    # route GET /www/sigla/rota",
      "    # Informação sobre o controller",
      "    # retorno do controller [JSON]",
      "    public function index($$parameter = NULL)",
      "    {",
      "        try {",
      "            $$apiRespond = [",
      "                'http' => array(",
      "                    'header'  => 'Content-type: application/x-www-form-urlencoded',",
      "                    'method'  => 'GET/POST',",
      "                ),",
      "                'message' => 'API loading data (dados para carregamento da API)',",
      "                'date' => date('Y-m-d'),",
      "                // 'method' => '__METHOD__',",
      "                // 'function' => '__FUNCTION__',",
      "                'page_title' => 'TITLE PAGE',",
      "                'getURI' => $$this->uri->getSegments(),",
      "                'result' => array()",
      "            ];",
      "            $$response = $$this->response->setJSON($$apiRespond, 201);",
      "        } catch (\\Exception $$e) {",
      "            $$apiRespond = array(",
      "                'message' => array('danger'=>$$e->getMessage()),",
      "                'page_title' => 'TITLE PAGE',",
      "            );",
      "            $$response = $$this->response->setJSON($$apiRespond, 404);",
      "        }",
      "        return $$response;",
      "    }",
      "}"
    ],
    "description": "Classe Controller API completa"
  },

  "snippets-controller-endpoint": {
    "prefix": "snippets-controller-endpoint",
    "body": [
      "namespace App\\Controllers;",
      "",
      "use CodeIgniter\\RESTful\\ResourceController;",
      "use CodeIgniter\\API\\ResponseTrait;",
      "// use App\\Models\\NomeModel;",
      "use Exception;",
      "",
      "class NomeController extends ResourceController",
      "{",
      "    use ResponseTrait;",
      "    private $$ModelResponse;",
      "    private $$uri;",
      "    private $$template = 'template/main.php';",
      "",
      "    public function __construct()",
      "    {",
      "        // $$this->ModelResponse = new NomeModel();",
      "        $$this->uri = new \\CodeIgniter\\HTTP\\URI(current_url());",
      "        // helper([",
      "        //     'myPrint',",
      "        //     'myEndPoint',",
      "        //     'myDate',",
      "        //     'myIdUFF',",
      "        //     'form'",
      "        // ]);",
      "        return NULL;",
      "    }",
      "",
      "    # route POST /www/sigla/rota",
      "    # route GET /www/sigla/rota",
      "    # Informação sobre o controller",
      "    # retorno do controller [view]",
      "    public function index($$parameter = NULL)",
      "    {",
      "        $$request = service('request');",
      "        $$dbRequest = (array)$$request->getVar();",
      "        $$loadView = array(",
      "            'sigla/title',",
      "            'sigla/menu',",
      "            'sigla/message'",
      "        );",
      "        try {",
      "            # URI da API",
      "            $$uri = base_url() . '/sigla/rota/' . $$parameter;",
      "            # Decisão URI da API",
      "            if ($$dbRequest !== array()) {",
      "                $$uri = base_url() . '/sigla/rota/path/path/' . $$dbRequest;",
      "            } else {",
      "                $$uri = base_url() . '/sigla/rota/path/path/' . $$parameter;",
      "            }",
      "            # Carrega a configuração de API",
      "            $$APIform = \\Config\\Services::curlrequest();",
      "            # Recebe a API",
      "            $$requestAPIform = $$APIform->request('GET', $$uri);",
      "            # Recebe o JSON da API",
      "            $$requestJSONform = json_decode($$requestAPIform->getBody(), true); // true para exibir em array",
      "            $$requestJSONform = array();",
      "            $$apiRespond = [",
      "                'http' => array(",
      "                    'header'  => 'Content-type: application/x-www-form-urlencoded',",
      "                    'method'  => 'GET/POST',",
      "                ),",
      "                'message' => 'API loading data (dados para carregamento da API)',",
      "                'date' => date('Y-m-d'),",
      "                // 'method' => '__METHOD__',",
      "                // 'function' => '__FUNCTION__',",
      "                // 'getURI' => $$this->uri->getSegments(),",
      "                // 'protocol' => strtoupper(myIdUFF()),",
      "                'page_title' => 'Funções',",
      "                'result' => $$requestJSONform,",
      "                'loadView' => $$loadView",
      "            ];",
      "        } catch (\\Exception $$e) {",
      "            $$apiRespond = array(",
      "                'message' => array('danger'=>$$e->getMessage()),",
      "                'loadView' => $$loadView",
      "            );",
      "        }",
      "        return view('template/main', $$apiRespond);",
      "    }",
      "}"
    ],
    "description": "Classe Controller EndPoint completo"
  },

  "snippets-method-apirest": {
    "prefix": "snippets-method-apirest",
    "body": [
      "    # route POST /www/sigla/rota",
      "    # route GET /www/sigla/rota",
      "    # Informação sobre o controller",
      "    # retorno do controller [JSON]",
      "    public function onRest($$parameter = NULL)",
      "    {",
      "        # Parâmentros para receber um POST",
      "        $$request = service('request');",
      "        $$dbRequest = (array)$$request->getVar();",
      "        try {",
      "            if ($$dbRequest !== array()) {",
      "                # CRUD da Model",
      "                // $$dbResponse[] = $$this->ModelResponse->dBcreate($$dbRequest);",
      "                // $$dbResponse[] = $$this->ModelResponse->dBread($$IdUFF = NULL);",
      "                // $$dbResponse[] = $$this->ModelResponse->dBupdate($$IdUFF = NULL);",
      "                // $$dbResponse[] = $$this->ModelResponse->dBdelete($$IdUFF = NULL);",
      "            }else{",
      "                # CRUD da Model",
      "                // $$dbResponse[] = $$this->ModelResponse->dBcreate($$parameter);",
      "                // $$dbResponse[] = $$this->ModelResponse->dBread($$parameter = NULL);",
      "                // $$dbResponse[] = $$this->ModelResponse->dBupdate($$parameter = NULL);",
      "                // $$dbResponse[] = $$this->ModelResponse->dBdelete($$parameter = NULL);",
      "            };",
      "            $$apiRespond = [",
      "                'http' => array(",
      "                    'header'  => 'Content-type: application/x-www-form-urlencoded',",
      "                    'method'  => 'GET/POST',",
      "                ),",
      "                'message' => 'API loading data (dados para carregamento da API)',",
      "                'date' => date('Y-m-d'),",
      "                // 'method' => '__METHOD__',",
      "                // 'function' => '__FUNCTION__',",
      "                'page_title' => 'TITLE PAGE',",
      "                // 'result' => $$dbResponse,",
      "            ];",
      "            $$response = $$this->response->setJSON($$apiRespond, 201);",
      "        } catch (\\Exception $$e) {",
      "            $$apiRespond = array(",
      "                'message' => array('danger'=>$$e->getMessage()),",
      "                'page_title' => 'TITLE PAGE',",
      "            );",
      "            $$response = $$this->response->setJSON($$apiRespond, 404);",
      "        }",
      "        return $$response;",
      "    }"
    ],
    "description": "Modelo de Consumo e API"
  },

  "snippets-method-endpoint": {
    "prefix": "snippets-method-endpoint",
    "body": [
      "    # Consumo de API",
      "    # route GET /www/sigla/rota",
      "    # route POST /www/sigla/rota",
      "    # Informação sobre o controller",
      "    # retorno do controller [VIEW]",
      "    public function displayAPI($$parameter = NULL)",
      "    {",
      "        $$request = service('request');",
      "        $$dbRequest = (array)$$request->getVar();",
      "        $$loadView = array(",
      "            'sigla/title',",
      "            'sigla/menu',",
      "            'sigla/message'",
      "        );",
      "        try {",
      "            # URI da API",
      "            $$uri = base_url() . '/sigla/rota/' . $$parameter;",
      "            # Decisão URI da API",
      "            if ($$dbRequest !== array()) {",
      "                $$uri = base_url() . '/sigla/rota/path/path/' . $$dbRequest;",
      "            } else {",
      "                $$uri = base_url() . '/sigla/rota/path/path/' . $$parameter;",
      "            }",
      "            # Carrega a configuração de API",
      "            $$APIform = \\Config\\Services::curlrequest();",
      "            # Recebe a API",
      "            $$requestAPIform = $$APIform->request('GET', $$uri);",
      "            # Recebe o JSON da API",
      "            $$requestJSONform = json_decode($$requestAPIform->getBody(), true); // true para exibir em array",
      "            $$requestJSONform = array();",
      "            $$apiRespond = [",
      "                'http' => array(",
      "                    'header'  => 'Content-type: application/x-www-form-urlencoded',",
      "                    'method'  => 'GET/POST',",
      "                ),",
      "                'message' => 'API loading data (dados para carregamento da API)',",
      "                'date' => date('Y-m-d'),",
      "                // 'method' => '__METHOD__',",
      "                // 'function' => '__FUNCTION__',",
      "                // 'getURI' => $$this->uri->getSegments(),",
      "                // 'protocol' => strtoupper(myIdUFF()),",
      "                'page_title' => 'Funções',",
      "                'result' => $$requestJSONform,",
      "                'loadView' => $$loadView",
      "            ];",
      "        } catch (\\Exception $$e) {",
      "            $$apiRespond = array(",
      "                'message' => array('danger'=>$$e->getMessage()),",
      "                'loadView' => $$loadView",
      "            );",
      "        }",
      "        return view('template/main', $$apiRespond);",
      "    }"
    ],
    "description": "Modelo de Consumo e EndPoint"
  },

  "snippets-ci4-try-cat": {
    "prefix": "snippets-ci4-try-cat",
    "body": [
      "",
      "try {",
      "    //code...",
      "}catch (\\Exception $$e) {",
      "    $$systemReport['danger'] = $$e->getMessage();",
      "}"
    ],
    "description": "Try Cat"
  },

  "snippets-ci4-session": {
    "prefix": "snippets-ci4-session",
    "body": [
      "        session()->set('apiRespond',  $$apiRespond);",
      "        session()->markAsTempdata('apiRespond', 10);",
      "        if (session()->get('apiRespond')) {",
      "            $$apiSession = session()->get('apiRespond');",
      "            $$apiRespond['message'] = $$apiSession['message'];",
      "            //  myPrint($$apiRespond, true);",
      "        }"
    ],
    "description": "Sessão para CI3"
  },

  "snippets-myEndPoint": {
    "prefix": "snippets-myEndPoint",
    "body": [
      "$$myEndPoint = myEndPoint('/index.php/');",
      "$$requestJSON = $$myEndPoint;"
    ],
    "description": "Modelo de Consumo de API"
  },

  "snippets-model-head": {
    "prefix": "snippets-model-head",
    "body": [
      "namespace App\\Models;",
      "",
      "use CodeIgniter\\Database\\Query;",
      "use CodeIgniter\\Model;",
      "// use system\\Database\\Exceptions\\DatabaseException;",
      "",
      "class TabelaModel extends Model",
      "{",
      "",
      "    protected $$DBGroup = 'GRUPO_DB_CONFIG';",
      "",
      "    protected $$table = 'tabela_banco_dados';",
      "    protected $$primaryKey = 'id';",
      "    protected $$useAutoIncrement = true;",
      "    protected $$returnType = 'array';",
      "    protected $$allowedFields = [];",
      "    protected $$validationRules = [];",
      "    protected $$validationMessages = [];",
      "    protected $$skipValidation     = false;",
      "",
      "    protected $$useTimestamps = false;",
      "    protected $$createdField  = 'created_at';",
      "    protected $$updatedField  = 'updated_at';",
      "    protected $$deletedField  = 'deleted_at';",
      "",
      "    protected $$dbInsert;",
      "    protected $$dbReplace;",
      "    protected $$dbRead;",
      "    protected $$message;",
      "    protected $$affectedRows;",
      "",
      "}"
    ],
    "description": "Inicio da Model"
  },

  "snippets-model-dbread": {
    "prefix": "snippets-model-dbread",
    "body": [
      "    public function dbRead($$keyVariable = NULL, $$keyValue = NULL)",
      "    {",
      "        try {",
      "            if ($$keyVariable !== NULL && $$keyValue !== NULL) {",
      "                $$this->dbRead = $$this->where($$keyVariable, $$keyValue);",
      "            } elseif ($$keyVariable !== NULL && $$keyValue == NULL) {",
      "                $$this->dbRead = $$this->select([",
      "                    'campo1',",
      "                    'campo2',",
      "                    'campo3',",
      "                    'created_at',",
      "                    'updated_at',",
      "                    'delleted_at'",
      "                ]);",
      "            } else {",
      "                $$this->dbRead = $$this->select([",
      "                    'campo1',",
      "                    'campo2',",
      "                    'campo3',",
      "                    'created_at',",
      "                    'updated_at',",
      "                    'delleted_at'",
      "                ]);",
      "                $$this->affectedRows = $$this->db->affectedRows();",
      "            }",
      "        } catch (\\Throwable $$th) {",
      "            $$this->message['message']['danger'] = array(",
      "                $$th->getMessage(),",
      "            );",
      "            session()->set('message',  $$this->message);",
      "            session()->markAsTempdata('message', 5);",
      "        }",
      "        return $$this;",
      "    }"
    ],
    "description": "Modelo read de Consumo e API"
  },

  "snippets-model-dbcreate": {
    "prefix": "snippets-model-dbcreate",
    "body": [
      "    public function dbCreate($$dbCreate)",
      "    {",
      "        try {",
      "            $$this->allowedFields = array_keys($$dbCreate);",
      "            $$this->dbInsert = $$this->insert($$dbCreate);",
      "            $$this->affectedRows = $this->db->affectedRows();",
      "            // myPrint($$this->allowedFields, true);",
      "            // myPrint($$dbCreate, true);",
      "            // myPrint($$this->dbInsert);",
      "        } catch (\\Throwable $$th) {",
      "            $$this->message['message']['danger'] = array(",
      "                $$th->getMessage(),",
      "            );",
      "            session()->set('message',  $$this->message);",
      "            session()->markAsTempdata('message', 5);",
      "        }",
      "        return $$this;",
      "    }"
    ],
    "description": "Modelo creat de Consumo e API"
  },

  "snippets-model-dbUpdate": {
    "prefix": "snippets-model-dbUpdate",
    "body": [
      "    public function dbUpdate($$key, $$dbUpdate)",
      "    {",
      "        try {",
      "            if (isset($$key) && isset($$dbUpdate)) {",
      "                $$this->allowedFields = array_keys($$dbUpdate);",
      "                // myPrint($$this->allowedFields, true);",
      "                $$this->update($$key, $$dbUpdate);",
      "                // myPrint($$dbUpdate, true);",
      "            }",
      "            $$this->affectedRows = $$this->db->affectedRows();",
      "            if ($$this->affectedRows > 0) {",
      "                $$this->message['success'] = 'Atualização reaizada com sucesso.';",
      "            } else {",
      "                $$this->message['warning'] = 'Não foi possível realizar a atulização';",
      "            }",
      "        } catch (\\Throwable $$th) {",
      "            $$this->message['message']['danger'] = array(",
      "                $$th->getMessage(),",
      "            );",
      "            session()->set('message',  $$this->message);",
      "            session()->markAsTempdata('message', 5);",
      "        }",
      "        return $$this;",
      "    }"
    ],
    "description": "Modelo creat de Consumo e API"
  },

  "snippets-model-dbDelete": {
    "prefix": "snippets-model-dbDelete",
    "body": [
      "public function dBdelete($$key = NULL, $$dBdelete = NULL)",
      "    {",
      "",
      "        try {",
      "            if ($$dBdelete !== NULL) {",
      "                $$this->where($$key, $$dBdelete);",
      "                $$this->delete();",
      "            }else{",
      "                $$this->delete();",
      "                $$this->affectedRows = $$this->db->affectedRows();",
      "            }",
      "        } catch (\\Throwable $$th) {",
      "            $$this->message['message']['danger'] = array(",
      "                $$th->getMessage(),",
      "            );",
      "            session()->set('message',  $$this->message);",
      "            session()->markAsTempdata('message', 5);",
      "        }",
      "        return $$this;",
      "    }"
    ],
    "description": "Modelo delte de Consumo e API"
  },

  "snippets-form-multipart": {
    "prefix": "snippets-form-multipart",
    "body": [
      "<?= form_open_multipart('controller/method', 'class=\"was-validated\"'); ?>",
      "<?= form_close(\"&nbsp;\"); ?>"
    ],
    "description": "Fomulários para Codeigniter 4"
  },

  "snippets-form-label": {
    "prefix": "snippets-form-label",
    "body": [
      "$$_subtitle_label = [",
      "    'label_text' => '_Label_',",
      "    'id' => '_subtitle_',",
      "    'attributes' => [",
      "        'class' => 'form-label label-left'",
      "    ]",
      "];"
    ],
    "description": "Fomulários para Codeigniter 4"
  },

  "snippets-form-dropdown": {
    "prefix": "snippets-form-label",
    "body": [
      "$$_subtitle_ = [",
      "    'name' => '_subtitle_',",
      "    'options' => [",
      "        '001' => 'valor 1',",
      "        '002' => 'valor 2',",
      "        '003' => 'valor 3',",
      "        '004' => 'valor 4',",
      "        '005' => 'valor 5',",
      "    ],",
      "    'selected' => '003',",
      "    'extra' => [",
      "        'class' => 'form-control form-control-sm',",
      "        'id' => '_subtitle_',",
      "        // 'readonly' => 'readonly'",
      "    ]",
      "];"
    ],
    "description": "Fomulários para Codeigniter 4"
  },

  "snippets-form-textarea": {
    "prefix": "snippets-form-label",
    "body": [
      "$$_subtitle_ = [",
      "    'data' => [",
      "        'name'  => '_subtitle_',",
      "        'id'    => '_subtitle_',",
      "        'value' => set_value('_subtitle_', 'Descreva os detalhes'),",
      "        'maxlength' => '255',",
      "        'class' => 'form-control form-control-sm'",
      "    ],",
      "    'Message_required_field' => 'Campo _subtitle_ é Obrigatório',",
      "];"
    ],
    "description": "Fomulários para Codeigniter 4"
  },

  "snippets-form-input": {
    "prefix": "snippets-form-label",
    "body": [
      "$$_subtitle_ = [",
      "    'data' => [",
      "        'type' => 'text',",
      "        // 'type' => 'date',",
      "        // 'type' => 'email',",
      "        // 'type' => 'number',",
      "        'name' => '_subtitle_',",
      "        'id' => '_subtitle_',",
      "        'class' => 'form-control form-control-sm',",
      "        'maxlength' => '100',",
      "        'placeholder',",
      "        // 'min' => date('Y-m-d'),",
      "        // 'max' => '2023-12-31',",
      "        'required' => 'required'",
      "    ],",
      "    'field' => '_subtitle_',",
      "    'default' => '_subtitle_',",
      "    'html_escape' => true,",
      "    'escape' => true,",
      "    'Message_required_field' => 'Campo _subtitle_ Obrigatório',",
      "    'with_set' => true",
      "];"
    ],
    "description": "Fomulários para Codeigniter 4"
  }
}
