{
  // Place your snippets for php here. Each snippet is defined under a snippet name and has a prefix, body andc4-
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
  // same ids are connected.
  // Example:
  // "Print to console": {
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  
  "Print to console": {
  	"prefix": "c4-senha-hash",
  	"body": [
          "password_hash(\"$var\", PASSWORD_DEFAULT)"
          "password_verify(\"$var\")"
    ],
    "description": "Senha Hash para PHP"
  }, 
  "c4-controller-apirest": {
      "prefix": "c4-controller-apirest",
      "body": [
          "namespace App\\Controllers;",
          "",
          "use CodeIgniter\\RESTful\\ResourceController;",
          "use CodeIgniter\\API\\ResponseTrait;",
          "// use App\\Models\\NomeModel;",
          "use Exception;",
          "",
          "class NomeController extends ResourceController",
          "{",
          "    use ResponseTrait;",
          "    private $$ModelResponse;",
          "    private $$dbFields;",
          "    private $$uri;",
          "    ",
          "    public function __construct()",
          "    {",
          "        // $$this->ModelResponse = new NomeModel();",
          "        $$this->uri = new \\CodeIgniter\\HTTP\\URI(current_url());",
          "        // helper([",
          "        //'myPrint',",
          "        //'myDate',",
          "        //'myIdUFF',",
          "        //'myFake'",
          "        // ]);",
          "    }",
          "    #",
          "    # route POST /www/sigla/rota",
          "    # route GET /www/sigla/rota",
          "    # Informação sobre o controller",
          "    # retorno do controller [JSON]",
          "    public function index($$parameter = NULL)",
          "    {",
          "        # Parâmentros para receber um POST",
          "        $$request = service('request');",
          "        $$processRequest = (array)$$request->getVar();",
          "        $$json = $$processRequest['json'] ?? 0;",
          "        // $$processRequest = eagarScagaire($$processRequest);",
          "        #",
          "        try {",
          "                if (isset($$processRequest['id'])) {",
          "                    # CRUD da Model",
          "                    $$dbResponse[] = $$this->ModelResponse",
          "                        ->dBcreate($$processRequest);",
          "                    #",
          "                    // $$dbResponse[] = $$this->ModelResponse",
          "                    //    ->where('id', $$processRequest['id'])",
          "                    //     ->where('deleted_at', NULL)",
          "                    //     ->orderBy('updated_at', 'asc')",
          "                    //     ->dBread()",
          "                    //     ->find();",
          "                    #",
          "                    // $$dbResponse[] = $$this->ModelResponse",
          "                    //     ->dBupdate($$processRequest['id'], $$processRequest);",
          "                    #",
          "                    // $$dbResponse[] = $$this->ModelResponse",
          "                    //     ->where('id', $$processRequest['id'])",
          "                    //     ->dBdelete();",
          "                    #",
          "                } elseif ($$parameter !== NULL) {",
          "                    # CRUD da Model",
          "                    // $$dbResponse[] = $$this->ModelResponse",
          "                    //     ->dBcreate($$processRequest);",
          "                    #",
          "                    // $$dbResponse[] = $$this->ModelResponse",
          "                    //     ->where('id', $$parameter)",
          "                    //     ->where('deleted_at', NULL)",
          "                    //     ->orderBy('updated_at', 'asc')",
          "                    //     ->dBread()",
          "                    //     ->find();",
          "                    #",
          "                    // $$dbResponse[] = $$this->ModelResponse",
          "                    //     ->dBupdate($$parameter, $$processRequest);",
          "                    #",
          "                    // $$dbResponse[] = $$this->ModelResponse",
          "                    //     ->where('id', $$parameter)",
          "                    //     ->dBdelete();",
          "                    #",
          "                } else {",
          "                    // $$dbResponse[] = $$this->ModelResponse",
          "                    //     ->dBcreate($$processRequest);",
          "                    #",
          "                    // $$dbResponse[] = $$this->ModelResponse",
          "                    //     ->where('deleted_at', NULL)",
          "                    //     ->orderBy('updated_at', 'asc')",
          "                    //     ->dBread()",
          "                    //     ->findAll();",
          "                };",
          "                $$apiRespond = [",
          "                    'status' => 'success',",
          "                    'message' => 'API loading data (dados para carregamento da API)',",
          "                    'date' => date('Y-m-d'),",
          "                    'api' => [",
          "                        'version' => '1.0',",
          "                        'method' => $$request->getMethod() ?? 'unknown',",
          "                        'description' => 'API Description',",
          "                        'content_type' => 'application/x-www-form-urlencoded'",
          "                    ],",
          "                    // 'method' => '__METHOD__',",
          "                    // 'function' => '__FUNCTION__',",
          "                    'result' => $$processRequest,",
          "                    'metadata' => [",
          "                        'page_title' => 'Application title',",
          "                        'getURI' => $$this->uri->getSegments(),",
          "                        // Você pode adicionar campos comentados anteriormente se forem relevantes",
          "                        // 'method' => '__METHOD__',",
          "                        // 'function' => '__FUNCTION__',",
          "                        ]",
          "                ];",
          "                $$response = $$this->response->setJSON($$apiRespond, 201);",
          "            } catch (\\Exception $$e) {",
          "                $$apiRespond = array(",
          "                    'message' => array('danger'=>$$e->getMessage()),",
          "                    'page_title' => 'Application title',",
          "                    'getURI' => $$this->uri->getSegments(),",
          "                );",
          "                // $$this->returnFunction(array($$e->getMessage()), 'danger',);",
          "                $$response = $$this->response->setJSON($$apiRespond, 500);",
          "            if ($$json == 1) {",
          "                return $$response;",
          "                // return redirect()->back();",
          "                // return redirect()->to('project/endpoint/parameter/parameter/' . $$parameter);",
          "            } else {",
          "                return $$response;",
          "            }",
          "        }",
          "    }",
          "}",
      ],
      "description": "Classe Controller API completa"
  },
  "c4-controller-endpoint": {
    "prefix": "c4-controller-endpoint",
    "body": [
        "namespace App\\Controllers;",
        "",
        "use CodeIgniter\\RESTful\\ResourceController;",
        "use CodeIgniter\\API\\ResponseTrait;",
        "// use App\\Models\\NomeModel;",
        "use Exception;",
        "",
        "class NomeController extends ResourceController",
        "{",
        "    use ResponseTrait;",
        "    private $$template = 'projeto_view/template/main';",
        "    private $$message = 'projeto_view/message';",
        "    private $$footer = 'projeto_view/footer';",
        "    private $$head = 'projeto_view/head';",
        "    private $$menu = 'projeto_view/menu';",
        "    private $$ModelResponse;",
        "    private $$uri;",
        "    #",
        "    public function __construct()",
        "    {",
        "        // $$this->ModelResponse = new NomeModel();",
        "        $$this->uri = new \\CodeIgniter\\HTTP\\URI(current_url());",
        "        return NULL;",
        "    }",
        "    #",
        "    # route POST /www/sigla/rota",
        "    # route GET /www/sigla/rota",
        "    # Informação sobre o controller",
        "    # retorno do controller [view]",
        "    public function index($$parameter = NULL)",
        "    {",
        "        $$request = service('request');",
        "        $$processRequest = (array)$$request->getVar();",
        "        // $$processRequest = eagarScagaire($$processRequest);",
        "        #",
        "        $$loadView = array(",
        "            $$this->head,",
        "            $$this->menu,",
        "            $$this->message,",
        "            $$this->footer,",
        "        );",
        "        try {",
        "            # URI da API",
        "            $$uri = base_url() . '/sigla/rota/' . $$parameter;",
        "            # Decisão URI da API",
        "            if ($$processRequest !== array()) {",
        "                $$uri = base_url() . '/sigla/rota/path/path/' . $$processRequest;",
        "            } else {",
        "                $$uri = base_url() . '/sigla/rota/path/path/' . $$parameter;",
        "            }",
        "            # Carrega a configuração de API",
        "            $$APIform = \\Config\\Services::curlrequest();",
        "            # Recebe a API",
        "            $$requestAPIform = $$APIform->request('GET', $$uri);",
        "            # Recebe o JSON da API",
        "            $$requestJSONform = json_decode($$requestAPIform->getBody(), true);",
        "            $$requestJSONform = array();",
        "            $$apiRespond = [",
        "                'status' => 'success',",
        "                'message' => 'API loading data (dados para carregamento da API)',",
        "                'date' => date('Y-m-d'),",
        "                'api' => [",
        "                    'version' => '1.0',",
        "                    'method' => $$request->getMethod() ?? 'unknown',",
        "                    'description' => 'API Description',",
        "                    'content_type' => 'application/x-www-form-urlencoded'",
        "                ],",
        "                // 'method' => '__METHOD__',",
        "                // 'function' => '__FUNCTION__',",
        "                'result' => $$processRequest,",
        "                'loadView' => $$loadView,",
        "                'metadata' => [",
        "                    'page_title' => 'Application title',",
        "                    'getURI' => $$this->uri->getSegments(),",
        "                    // Você pode adicionar campos comentados anteriormente se forem relevantes",
        "                    // 'method' => '__METHOD__',",
        "                    // 'function' => '__FUNCTION__',",
        "                    ]",
        "            ];",
        "        } catch (\\Exception $$e) {",
        "            $$apiRespond = [",
        "                'status' => 'error',",
        "                'message' => $$e->getMessage(),",
        "                'date' => date('Y-m-d'),",
        "                'api' => [",
        "                    'version' => '1.0',",
        "                    'method' => $$request->getMethod() ?? 'unknown',",
        "                    'description' => 'API Criar Method',",
        "                    'content_type' => 'application/x-www-form-urlencoded'",
        "                ],",
        "                'metadata' => [",
        "                    'page_title' => 'ERRO - API Method',",
        "                    'getURI' => $$this->uri->getSegments(),",
        "                ]",
        "            ];",
        "        }",
        "        if($$parameter != 'json'){",
        "            return $$apiRespond;",
        "            // return view($$this->template, $$apiRespond);",
        "        }else{",
        "            return $$apiRespond;",
        "        }",
        "    }",
        "}",
    ],
    "description": "Classe Controller EndPoint completo"
  },
  "c4-method-create_update": {
      "prefix": "c4-method-create_update",
      "body": [
          "    # route POST /www/crud/api/criar/(:any)",
          "    # route GET /www/crud/api/criar/(:any)",
          "    # route POST /www/crud/api/atualizar/(:any)",
          "    # route GET /www/crud/api/atualizar/(:any)",
          "    # Informação sobre o controller",
          "    # retorno do controller [JSON]",
          "    public function create_update($$parameter = NULL)",
          "    {",
          "        # Parâmentros para receber um POST",
          "        $$request = service('request');",
          "        $$processRequest = (array)$$request->getVar();",
          "        $$token_csrf = ($$processRequest['token_csrf'] ?? NULL);",
          "        $$json = ($$processRequest['json'] ?? FALSE);",
          "        $$id = (isset($$processRequest['id'])) ? (true) : (false);",
          "        // $$processRequest = eagarScagaire($$processRequest);",
          "        #",
          "        // $$processRequest = array();",
          "        try {",
          "            if ($$id === true) {",
          "                if ($$this->validtoken_csrf($$token_csrf)) {",
          "                    $$this->ModelResponse->dbUpdate(",
          "                        $$processRequest['id'],",
          "                        $$this->dbFields($$processRequest)",
          "                    );",
          "                    if ($$this->ModelResponse->affectedRows() > 0) {"
          "                        $$this->returnMyFunction(['Update realizado com sucesso'], 'success');",
          "                        $$processRequestSuccess = true;",
          "                    }",
          "                }",
          "            } elseif ($$id === false) {",
          "                if ($$this->validtoken_csrf($$token_csrf)) {",
          "                    $$this->ModelResponse->dbCreate($$this->dbFields($$processRequest));",
          "                    if ($$this->ModelResponse->affectedRows() > 0) {",
          "                        $$this->returnMyFunction(['Create realizado com sucesso'], 'success');",
          "                        $$processRequestSuccess = true;",
          "                    }",
          "                }",
          "            } else {",
          "                $$this->returnMyFunction(['ERRO: Dados enviados inválidos'], 'danger');",
          "            };",
          "            $$status = (!isset($$processRequestSuccess) || $$processRequestSuccess !== true) ? ('trouble') : ('success');",
          "            $$message = (!isset($$processRequestSuccess) || $$processRequestSuccess !== true) ? ('Erro - requisição que foi bem-formada mas não pôde ser seguida devido a erros semânticos.') : ('API loading data (dados para carregamento da API)');",
          "            $$cod_http = (!isset($$processRequestSuccess) || $$processRequestSuccess !== true) ? (422) : (201);",
          "            $$apiRespond = [",
          "                'status' => $$status,",
          "                'message' => $$message,",
          "                'date' => date('Y-m-d'),",
          "                'api' => [",
          "                    'version' => '1.0',",
          "                    'method' => $$request->getMethod() ?? 'unknown',",
          "                    'description' => 'API Description',",
          "                    'content_type' => 'application/x-www-form-urlencoded'",
          "                ],",
          "                // 'method' => '__METHOD__',",
          "                // 'function' => '__FUNCTION__',",
          "                'result' => $$processRequest,",
          "                'metadata' => [",
          "                    'page_title' => 'Application title',",
          "                    'getURI' => $$this->uri->getSegments(),",
          "                    // Você pode adicionar campos comentados anteriormente se forem relevantes",
          "                    // 'method' => '__METHOD__',",
          "                    // 'function' => '__FUNCTION__',",
          "                    ]",
          "            ];",
          "            $$response = $$this->response->setJSON($$apiRespond, $$cod_http);",
          "        } catch (\\Exception $$e) {",
          "                $$apiRespond = [",
          "                    'status' => 'error',",
          "                    'message' => $$e->getMessage(),",
          "                    'date' => date('Y-m-d'),",
          "                    'api' => [",
          "                        'version' => '1.0',",
          "                        'method' => $$request->getMethod() ?? 'unknown',",
          "                        'description' => 'API Criar Method',",
          "                        'content_type' => 'application/x-www-form-urlencoded'",
          "                    ],",
          "                    'metadata' => [",
          "                        'page_title' => 'ERRO - API Method',",
          "                        'getURI' => $$this->uri->getSegments(),",
          "                    ]",
          "                ];",
          "            $$response = $$this->response->setJSON($$apiRespond, 500);",
          "        }",
          "        if($$json){",
          "            return $$response;",
          "            // return redirect()->to('project/endpoint/parameter/parameter/' . $$parameter);",
          "        }else{",
          "            return $$response;",
          "            // return redirect()->back();",
          "        }",
          "    }"
      ],
      "description": "API para creator que retorna JSON ou redireciona"
  },
  "c4-method-read": {
      "prefix": "c4-method-read",
      "body": [
          "# route POST /www/sigla/rota",
          "# route GET /www/sigla/rota",
          "# Informação sobre o controller",
          "# retorno do controller [JSON]",
          "public function read($$parameter = NULL)",
          "{",
          "    # Parâmentros para receber um POST",
          "    $$request = service('request');",
          "    $$processRequest = (array)$$request->getVar();",
          "    // $$processRequest = eagarScagaire($processRequest);",
          "    #",
          "    try {",
          "        if (isset($$processRequest['id'])) {",
          "            // $$dbResponse[] = $$this->ModelResponse",
          "            //    ->where('id', $$processRequest['id'])",
          "            //     ->where('deleted_at', NULL)",
          "            //     ->orderBy('updated_at', 'asc')",
          "            //     ->dBread()",
          "            //     ->find();",
          "            #",
          "        } elseif ($$parameter !== NULL) {",
          "            // $$dbResponse[] = $$this->ModelResponse",
          "            //     ->where('id', $$parameter)",
          "            //     ->where('deleted_at', NULL)",
          "            //     ->orderBy('updated_at', 'asc')",
          "            //     ->dBread()",
          "            //     ->find();",
          "            #",
          "        } else {",
          "            // $$dbResponse[] = $$this->ModelResponse",
          "            //     ->where('deleted_at', NULL)",
          "            //     ->orderBy('updated_at', 'asc')",
          "            //     ->dBread()",
          "            //     ->findAll();",
          "        };",
          "        $$apiRespond = [",
          "            'status' => 'success',",
          "            'message' => 'API loading data (dados para carregamento da API)',",
          "            'date' => date('Y-m-d'),",
          "            'api' => [",
          "                'version' => '1.0',",
          "                'method' => $$request->getMethod() ?? 'unknown',",
          "                'description' => 'API Description',",
          "                'content_type' => 'application/x-www-form-urlencoded'",
          "            ],",
          "            // 'method' => '__METHOD__',",
          "            // 'function' => '__FUNCTION__',",
          "            'result' => $$processRequest,",
          "            'metadata' => [",
          "                'page_title' => 'Application title',",
          "                'getURI' => $$this->uri->getSegments(),",
          "                // Você pode adicionar campos comentados anteriormente se forem relevantes",
          "                // 'method' => '__METHOD__',",
          "                // 'function' => '__FUNCTION__',",
          "                ]",
          "        ];",
          "        $$response = $$this->response->setJSON($$apiRespond, 201);",
          "    } catch (\\Exception $$e) {",
          "            $$apiRespond = [",
          "                'status' => 'error',",
          "                'message' => $$e->getMessage(),",
          "                'date' => date('Y-m-d'),",
          "                'api' => [",
          "                    'version' => '1.0',",
          "                    'method' => $$request->getMethod() ?? 'unknown',",
          "                    'description' => 'API Criar Method',",
          "                    'content_type' => 'application/x-www-form-urlencoded'",
          "                ],",
          "                'metadata' => [",
          "                    'page_title' => 'ERRO - API Method',",
          "                    'getURI' => $$this->uri->getSegments(),",
          "                ]",
          "            ];",
          "            $$response = $$this->response->setJSON($$apiRespond, 500);",
          "    }",
          "    if($$parameter != 'json'){",
          "        return $$response;",
          "        // return redirect()->back();",
          "        // return redirect()->to('project/endpoint/parameter/parameter/' . $$parameter);",
          "    }else{",
          "        return $$response;",
          "    }",
          "}"
      ],
      "description": "Validação do Token para o formulário"
  },
  "c4-method-apirest": {
      "prefix": "c4-method-apirest",
      "body": [
          "# route POST /www/sigla/rota",
          "# route GET /www/sigla/rota",
          "# Informação sobre o controller",
          "# retorno do controller [JSON]",
          "public function onRest($$parameter = NULL)",
          "{",
          "    # Parâmentros para receber um POST",
          "    $$request = service('request');",
          "    $$processRequest = (array)$$request->getVar();",
          "    $$json = $$processRequest['json'] ?? 0;",
          "    // $$processRequest = eagarScagaire($$processRequest);",
          "    #",
          "    try {",
          "        if (isset($$processRequest['id'])) {",
          "            # CRUD da Model",
          "            $$dbResponse[] = $$this->ModelResponse",
          "                ->dBcreate($$processRequest);",
          "            #",
          "            // $$dbResponse[] = $$this->ModelResponse",
          "            //    ->where('id', $$processRequest['id'])",
          "            //     ->where('deleted_at', NULL)",
          "            //     ->orderBy('updated_at', 'asc')",
          "            //     ->dBread()",
          "            //     ->find();",
          "            #",
          "            // $$dbResponse[] = $$this->ModelResponse",
          "            //     ->dBupdate($$processRequest['id'], $$processRequest);",
          "            #",
          "            // $$dbResponse[] = $$this->ModelResponse",
          "            //     ->where('id', $$processRequest['id'])",
          "            //     ->dBdelete();",
          "            #",
          "        } elseif ($$parameter !== NULL) {",
          "            # CRUD da Model",
          "            // $$dbResponse[] = $$this->ModelResponse",
          "            //     ->dBcreate($$processRequest);",
          "            #",
          "            // $$dbResponse[] = $$this->ModelResponse",
          "            //     ->where('id', $$parameter)",
          "            //     ->where('deleted_at', NULL)",
          "            //     ->orderBy('updated_at', 'asc')",
          "            //     ->dBread()",
          "            //     ->find();",
          "            #",
          "            // $$dbResponse[] = $$this->ModelResponse",
          "            //     ->dBupdate($$parameter, $$processRequest);",
          "            #",
          "            // $$dbResponse[] = $$this->ModelResponse",
          "            //     ->where('id', $$parameter)",
          "            //     ->dBdelete();",
          "            #",
          "        } else {",
          "            // $$dbResponse[] = $$this->ModelResponse",
          "            //     ->dBcreate($$processRequest);",
          "            #",
          "            // $$dbResponse[] = $$this->ModelResponse",
          "            //     ->where('deleted_at', NULL)",
          "            //     ->orderBy('updated_at', 'asc')",
          "            //     ->dBread()",
          "            //     ->find();",
          "        };",
          "        $$apiRespond = [",
          "            'status' => 'success',",
          "            'message' => 'API loading data (dados para carregamento da API)',",
          "            'date' => date('Y-m-d'),",
          "            'api' => [",
          "                'version' => '1.0',",
          "                'method' => $$request->getMethod() ?? 'unknown',",
          "                'description' => 'API Description',",
          "                'content_type' => 'application/x-www-form-urlencoded'",
          "            ],",
          "            // 'method' => '__METHOD__',",
          "            // 'function' => '__FUNCTION__',",
          "            'result' => $$processRequest,",
          "            'metadata' => [",
          "                'page_title' => 'Application title',",
          "                'getURI' => $$this->uri->getSegments(),",
          "                // Você pode adicionar campos comentados anteriormente se forem relevantes",
          "                // 'method' => '__METHOD__',",
          "                // 'function' => '__FUNCTION__',",
          "                ]",
          "            ];",
          "            $$response = $$this->response->setJSON($$apiRespond, 201);",
          "        } catch (\\Exception $$e) {",
          "            $$apiRespond = array(",
          "                'message' => array('danger'=>$$e->getMessage()),",
          "                'page_title' => 'Application title',",
          "                'getURI' => $$this->uri->getSegments(),",
          "            );",
          "            // $$this->returnFunction(array($$e->getMessage()), 'danger',);",
          "            $$response = $$this->response->setJSON($$apiRespond, 500);",
          "        if ($$json == 1) {",
          "            return $$response;",
          "            // return redirect()->back();",
          "            // return redirect()->to('project/endpoint/parameter/parameter/' . $$parameter);",
          "        } else {",
          "            return $$response;",
          "        }",
          "    }",
          "}",
      ],
      "description": "Modelo de Consumo e API"
  },
  "c4-method-endpoint": {
      "prefix": "c4-method-endpoint",
      "body": [
          "    # Consumo de API",
          "    # route GET /www/sigla/rota",
          "    # route POST /www/sigla/rota",
          "    # Informação sobre o controller",
          "    # retorno do controller [VIEW]",
          "    public function displayAPI($$parameter = NULL)",
          "    {",
          "        $$request = service('request');",
          "        $$processRequest = (array)$$request->getVar();",
          "        $$json = $$processRequest['json'] ?? 0;",
          "        $$id = (isset($$processRequest['id'])) ? ('/' . $$processRequest['id']) : ('/' . $$parameter);",
          "        // $$processRequest = eagarScagaire($$processRequest);",
          "        #",
          "        $$loadView = array(",
          "            $$this->head,",
          "            $$this->menu,",
          "            $$this->message,",
          "            $$this->footer,",
          "        );",
          "        try {",
          "            // if ($$id === '/') {",
          "            //     $$myEndPoint = myEndPoint('dadospessoais/api/listar', '123');",
          "            // } else {",
          "            //     $$myEndPoint = myEndPoint('dadospessoais/api/listar' . $$id, '123');",
          "            // }",
          "            // $$requestJSONform = (isset($$myEndPoint['result'])) ? ($$myEndPoint['result']) : (array());",
          "            # URI da API",
          "            $$uri = base_url() . '/sigla/rota/' . $$parameter;",
          "            # Decisão URI da API",
          "            if (isset($$processRequest['id'])) {",
          "                $$uri = base_url() . '/sigla/rota/path/path/' . isset($$processRequest['id']);",
          "            } elseif ($parameter) {",
          "                $$uri = base_url() . '/sigla/rota/path/path/' . $$parameter;",
          "            } else {",
          "                $$this->returnMyFunction(['Falha na definição do Endpoint'], 'warning');",
          "            }",
          "            # Carrega a configuração de API",
          "            $$APIform = \\Config\\Services::curlrequest();",
          "            # Recebe a API",
          "            $$requestAPIform = $$APIform->request('GET', $$uri);",
          "            # Recebe o JSON da API",
          "            $$requestJSONform = json_decode($$requestAPIform->getBody(), true);",
          "            $$requestJSONform = array();",
          "            $$apiRespond = [",
          "                'status' => 'success',",
          "                'message' => 'API loading data (dados para carregamento da API)',",
          "                'date' => date('Y-m-d'),",
          "                'api' => [",
          "                    'version' => '1.0',",
          "                    'method' => $$request->getMethod() ?? 'unknown',",
          "                    'description' => 'API Description',",
          "                    'content_type' => 'application/x-www-form-urlencoded'",
          "                ],",
          "                // 'method' => '__METHOD__',",
          "                // 'function' => '__FUNCTION__',",
          "                'result' => $$processRequest,",
          "                'loadView' => $$loadView,",
          "                'metadata' => [",
          "                    'page_title' => 'Application title',",
          "                    'getURI' => $$this->uri->getSegments(),",
          "                    // Você pode adicionar campos comentados anteriormente se forem relevantes",
          "                    // 'method' => '__METHOD__',",
          "                    // 'function' => '__FUNCTION__',",
          "                    ]",
          "            ];",
          "            if($$json == 1){",
          "                $$response = $$this->response->setJSON($$apiRespond, 201);",
          "            }",
          "        } catch (\\Exception $$e) {",
          "            $$apiRespond = [",
          "                'status' => 'error',",
          "                'message' => $$e->getMessage(),",
          "                'date' => date('Y-m-d'),",
          "                'api' => [",
          "                    'version' => '1.0',",
          "                    'method' => $$request->getMethod() ?? 'unknown',",
          "                    'description' => 'API Criar Method',",
          "                    'content_type' => 'application/x-www-form-urlencoded'",
          "                ],",
          "                'metadata' => [",
          "                    'page_title' => 'ERRO - API Method',",
          "                    'getURI' => $$this->uri->getSegments(),",
          "                ]",
          "            ];",
          "            if($$json == 1){",
          "                $$response = $$this->response->setJSON($$apiRespond, 500);",
          "            }",
          "        }",
          "        if($$json == 1){",
          "            return $$response;",
          "        }else{",
          "            return $$response;",
          "            // return view($$this->template, $$apiRespond);",
          "        }",
          "    }",
      ],
      "description": "Modelo de Consumo e EndPoint"
  },
  "c4-controller-dbFields": {
    "prefix": "c4-method-dbFields",
    "body": [
        "private function dbFields($$processRequestFields = array())",
        "{",
        "    $$dbCreate = array();",
        "    (isset($$processRequestFields['fieldForm'])) ? ($$dbCreate['fieldDb01'] = $$processRequestFields['fieldForm']) : (NULL);",
        "    (isset($$processRequestFields['fieldForm'])) ? ($$dbCreate['fieldDb02'] = $$processRequestFields['fieldForm']) : (NULL);",
        "    (isset($$processRequestFields['fieldForm'])) ? ($$dbCreate['fieldDb03'] = $$processRequestFields['fieldForm']) : (NULL);",
        "    (isset($$processRequestFields['fieldForm'])) ? ($$dbCreate['fieldDb04'] = $$processRequestFields['fieldForm']) : (NULL);",
        "    (isset($$processRequestFields['fieldForm'])) ? ($$dbCreate['fieldDb05'] = $$processRequestFields['fieldForm']) : (NULL);",
        "    (isset($$processRequestFields['fieldForm'])) ? ($$dbCreate['fieldDb06'] = $$processRequestFields['fieldForm']) : (NULL);",
        "    (isset($$processRequestFields['fieldForm'])) ? ($$dbCreate['fieldDb07'] = $$processRequestFields['fieldForm']) : (NULL);",
        "    (isset($$processRequestFields['created_at'])) ? ($$dbCreate['created_at'] = $$processRequestFields['created_at']) : (NULL);",
        "    (isset($$processRequestFields['updated_at'])) ? ($$dbCreate['updated_at'] = $$processRequestFields['updated_at']) : (NULL);",
        "    return ($$dbCreate);",
        "}"
    ],
    "description": "Dicionário de dados para a camada model"
  },
  "c4-controller-token_csrf": {
      "prefix": "c4-method-token_csrf",
      "body": [
        "    private function token_csrf()"
        "    {"
        "        $$token_csrf = md5(password_hash(time(), PASSWORD_DEFAULT));"
        "        session()->set('token_csrf',  $$token_csrf);"
        "        session()->markAsTempdata('token_csrf', 1800);"
        "        // myPrint($$token_csrf, 'www\\oficina\\app\\Controllers\\CustomersEndPointController.php', true);"
        "        return $$token_csrf;"
        "    }"
      ],
      "description": "Validação do Token para o formulário"
  },
  "c4-controller-validtoken_csrf": {
      "prefix": "c4-method-validtoken_csrf",
      "body": [
          "private function validtoken_csrf($$token)",
  
          "    {",
          "        if($$token = '$$2y$10$wB9i/CRwduLN0lgDED2jR.UrpxAw1eHBThgNYG.xfBfrhHr8IBOY2'){",
          "            return true;",
          "        }",
          "        if (session()->get('token_csrf')) {",
          "            $$token_csrf = session()->get('token_csrf');",
          "        } else {",
          "            $$token_csrf = 'FALSE';",
          "    }",
          "        if ($$token_csrf == $$token) {",
          "            return true;",
          "    }     else {",
          "          return false;",
          "    }",
          "}"
      ],
      "description": "Validação do Token para o formulário"
  },
  "c4-controller-returnMyFunction": {
    "prefix": "c4-method-returnMyFunction",
    "body": [
        "private function returnMyFunction($$message = array(), $$typeMessage, $$dataValue = array())",
        "{",
        "    // ['success', 'warning', 'danger'];",
        "        if ($$message !== array()) {",
        "            $$message['message'][$$typeMessage] = $$message;",
        "            session()->set('message',  $$message);",
        "            session()->markAsTempdata('message', 5);",
        "        if ($$dataValue !== array()) {",
        "            session()->set('value_form',  $$dataValue);",
        "        }",
        "            session()->markAsTempdata('message', 15);",
        "        }",
        "    return (NULL);",
        "}"
    ],
    "description": "Validação do Token para o formulário"
  },
  "c4-ci4-try-cat": {
      "prefix": "c4-ci4-try-cat",
      "body": [
          "",
          "try {",
          "    //code...",
          "}catch (\\Exception $$e) {",
          "    $$systemReport['danger'] = $$e->getMessage();",
          "}"
      ],
      "description": "Try Cat"
  },
  "c4-ci4-session": {
      "prefix": "c4-ci4-session",
      "body": [
          "    $$apiRespond = array(",
          "    'name_session' => '',",
          "    'time_in_seconds' => 10",
          "    );",
          "    #",
          "    session()->set($$apiRespond['name_session'],  $$apiRespond);",
          "    session()->markAsTempdata($$apiRespond['name_session'], $$apiRespond['time_in_seconds']);",
          "    #",
          "    if (session()->get('name_session')) {",
          "    $$apiSession = session()->get('name_session');",
          "    $$apiRespond['message'] = $$apiSession['message'];",
          "    //  myPrint($$apiSession, '', true);",
          "}",
      ],
      "description": "Sessão para CI3"
  },
  "c4-model-head": {
      "prefix": "c4-model-head",
      "body": [
          "namespace App\\Models;",
          "",
          "use CodeIgniter\\Database\\Query;",
          "use CodeIgniter\\Model;",
          "// use system\\Database\\Exceptions\\DatabaseException;",
          "",
          "class TabelaModel extends Model",
          "{",
          "",
          "    protected $$DBGroup = 'GRUPO_DB_CONFIG';",
          "",
          "    protected $$table = 'tabela_banco_dados';",
          "    protected $$primaryKey = 'id';",
          "    protected $$useAutoIncrement = true;",
          "    protected $$returnType = 'array';",
          "    protected $$allowedFields = [];",
          "    protected $$validationRules = [];",
          "    protected $$validationMessages = [];",
          "    protected $$skipValidation     = false;",
          "",
          "    protected $$useTimestamps = false;",
          "    protected $$createdField  = 'created_at';",
          "    protected $$updatedField  = 'updated_at';",
          "    protected $$deletedField  = 'deleted_at';",
          "",
          "    protected $$dbInsert;",
          "    protected $$dbReplace;",
          "    protected $$dbRead;",
          "    protected $$message;",
          "    protected $$affectedRows;",
          "",
          "}"
      ],
      "description": "Inicio da Model"
  },
  "c4-model-column": {
      "prefix": "c4-model-column",
      "body": [
          "    public function getColumnsFromTable($$table_name, $$parameter1 = 'column', $$parameter2 = 'value_type', $$parameter3 = 'value_key')",
          "    {",
          "    $$getTable = array();",
          "        # input: getColumnsFromTable('tab_link', 'column', 'type', 'key')",
          "        if ($$parameter1 == 'column' && $$parameter2 == 'value_type' && $$parameter3 == 'value_key') {",
          "            $$query = $$this->query(\"SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = '$$table_name';\");",
          "            foreach ($$query->getResultArray() as $$key => $$value_columns) {",
          "                $$getTable['COLUMN'][] = $$value_columns['COLUMN_NAME'];",
          "        }",
          "    } elseif ($$parameter1 == 'column' && $$parameter2 == 'type' && $$parameter3 == 'value_key') {",
          "        $$query = $$this->query(\"SELECT COLUMN_NAME, DATA_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = '$$table_name';\");",
          "        foreach ($$query->getResultArray() as $$key => $$value_columns) {",
          "        $$getTable['COLUMN'][] = $$value_columns['COLUMN_NAME'] . ', ' . $$value_columns['DATA_TYPE'];",
          "    }",
          "    } elseif ($$parameter1 == 'column' && $$parameter2 == 'type' && $$parameter3 == 'key') {",
          "    $$query = $$this->query(\"SELECT COLUMN_NAME, DATA_TYPE, COLUMN_KEY FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = '$$table_name';\");",
          "    foreach ($$query->getResultArray() as $$key => $$value_columns) {",
          "        $$getTable['COLUMN'][] = $$value_columns['COLUMN_NAME'] . ', ' . $$value_columns['DATA_TYPE'] . ', ' . $$value_columns['COLUMN_KEY'];",
          "    }",
          "    }",
          "return $$getTable;",
          "}"
      ],
      "description": "Revela Nome, Tipo e Chave das colunas no banco de dados"
  },
  "c4-model-dbread": {
      "prefix": "c4-model-dbread",
      "body": [
          "public function dbRead($$keyVariable = NULL, $$keyValue = NULL)",
          "{",
          "$$getColumnsFromTable = array();",
          "// $$getColumnsFromTable = $$this->getColumnsFromTable($$this->table)['COLUMN'];",
          "$$this->allowedFields = $$getColumnsFromTable;",
          "// myPrint($$getColumnsFromTable, 'src/app/Models/ComCategoriaModel.php');",
          "#",
          "try {",
          "    if ($$keyVariable !== NULL && $$keyValue !== NULL) {",
          "        $$this->dbRead = $$this->where($$keyVariable, $$keyValue);",
          "    } elseif ($$keyVariable !== NULL && $$keyValue == NULL) {",
          "        $$this->dbRead = $$this->select($$this->allowedFields);",
          "    } else {",
          "        $$this->dbRead = $$this->select($$this->allowedFields);",
          "        $$this->affectedRows = $$this->db->affectedRows();",
          "}",
          "} catch (\\Throwable $$th) {",
          "    $$this->message['message']['danger'] = array(",
          "        $$th->getMessage(),",
          "    );",
          "    session()->set('message',  $$this->message);",
          "    session()->markAsTempdata('message', 5);",
          "       }",
          "return $$this;",
          "}"
      ],
      "description": "Modelo read de Consumo e API"
  },
  "c4-model-dbcreate": {
      "prefix": "c4-model-dbcreate",
      "body": [
          "public function dbCreate($$dbCreate)",
          "{",
          "try {",
          "    $$this->allowedFields = array_keys($$dbCreate);",
          "    $$this->dbInsert = $$this->insert($$dbCreate);",
          "    $$this->affectedRows = $$this->db->affectedRows();",
          "    // myPrint($$this->allowedFields, true);",
          "    // myPrint($$dbCreate, true);",
          "    // myPrint($$this->dbInsert);",
          "} catch (\\Throwable $$th) {",
          "    $$this->message['message']['danger'] = array(",
          "        $$th->getMessage(),",
          "    );",
          "    session()->set('message',  $$this->message);",
          "    session()->markAsTempdata('message', 5);",
          "}",
          "return $$this;",
          "}"
      ],
      "description": "Modelo creat de Consumo e API"
  },
  "c4-model-dbUpdate": {
      "prefix": "c4-model-dbUpdate",
      "body": [
          "public function dbUpdate($$key, $$dbUpdate)",
          "{",
          "    try {",
          "    if (isset($$key) && isset($$dbUpdate)) {",
          "        $$this->allowedFields = array_keys($$dbUpdate);",
          "        // myPrint($$this->allowedFields, true);",
          "        $$this->update($$key, $$dbUpdate);",
          "        // myPrint($$dbUpdate, true);",
          "}",
          "    $$this->affectedRows = $$this->db->affectedRows();",
          "    if ($$this->affectedRows > 0) {",
          "        $$this->message['success'] = 'Atualização reaizada com sucesso.';",
          "    } else {",
          "        $$this->message['warning'] = 'Não foi possível realizar a atulização';",
          "}",
          "    } catch (\\Throwable $$th) {",
          "    $$this->message['message']['danger'] = array(",
          "        $$th->getMessage(),",
          "    );",
          "    session()->set('message',  $$this->message);",
          "    session()->markAsTempdata('message', 5);",
          "}",
          "    return $$this;",
          "}"
      ],
      "description": "Modelo creat de Consumo e API"
  },
  "c4-model-dbDelete": {
      "prefix": "c4-model-dbDelete",
      "body": [
          "public function dBdelete()",
          "    {",
          "",
          "try {",
          "        $$this->delete();",
          "} catch (\\Throwable $$th) {",
          "    $$this->message['message']['danger'] = array(",
          "        $$th->getMessage(),",
          "    );",
          "    session()->set('message',  $$this->message);",
          "    session()->markAsTempdata('message', 5);",
          "}",
          "return $$this;",
          "}"
      ],
      "description": "Modelo delte de Consumo e API"
  },
  "c4-form-multipart": {
      "prefix": "c4-form-multipart",
      "body": [
          "<?= form_open_multipart('controller/method', 'class=\"was-validated\"'); ?>",
          "<?= form_close(\"&nbsp;\"); ?>"
      ],
      "description": "Fomulários para Codeigniter 4"
  },
  "c4-form-label": {
      "prefix": "c4-form-label",
      "body": [
          "$$_subtitle__label = [",
          "    'label_text' => '_Label_',",
          "    'id' => '_subtitle_',",
          "    'attributes' => [",
          "'class' => 'form-label label-left'",
          "    ]",
          "];"
      ],
      "description": "Fomulários para Codeigniter 4"
  },
  "c4-form-dropdown": {
      "prefix": "c4-form-dropdown",
      "body": [
          "$$_subtitle_ = [",
          "    'name' => '_subtitle_',",
          "    'options' => [",
          "'001' => 'valor 1',",
          "'002' => 'valor 2',",
          "'003' => 'valor 3',",
          "'004' => 'valor 4',",
          "'005' => 'valor 5',",
          "    ],",
          "    'selected' => '003',",
          "    'extra' => [",
          "'class' => 'form-control form-control-sm',",
          "'id' => '_subtitle_',",
          "// 'readonly' => 'readonly'",
          "    ]",
          "];"
      ],
      "description": "Fomulários para Codeigniter 4"
  },
  "c4-form-textarea": {
      "prefix": "c4-form-textarea",
      "body": [
          "$$_subtitle_ = [",
          "    'data' => [",
          "'name'  => '_subtitle_',",
          "'id'    => '_subtitle_',",
          "'value' => set_value('_subtitle_', 'Descreva os detalhes'),",
          "'maxlength' => '255',",
          "'class' => 'form-control form-control-sm'",
          "    ],",
          "    'Message_required_field' => 'Campo _Label_ é Obrigatório',",
          "];"
      ],
      "description": "Fomulários para Codeigniter 4"
  },
  "c4-form-input": {
      "prefix": "c4-form-input",
      "body": [
          "$$_subtitle_ = [",
          "    'data' => [",
          "'type' => 'text',",
          "// 'type' => 'hidden',",
          "// 'type' => 'date',",
          "// 'type' => 'email',",
          "// 'type' => 'number',",
          "'name' => '_subtitle_',",
          "'id' => '_subtitle_',",
          "'class' => 'form-control form-control-sm',",
          "'maxlength' => '100',",
          "'placeholder' => '_Label_',",
          "// 'min' => date('Y-m-d'),",
          "// 'max' => '2023-12-31',",
          "// 'disabled' => 'disabled'",
          "// 'readonly' => 'readonly'",
          "'required' => 'required'",
          "    ],",
          "    'field' => '_subtitle_',",
          "    'default' => '_Label_',",
          "    'html_escape' => true,",
          "    'escape' => true,",
          "    'Message_required_field' => 'Campo _Label_ Obrigatório',",
          "    'with_set' => true",
          "];"
      ],
      "description": "Fomulários para Codeigniter 4"
  },
  "c4-form-password": {
      "prefix": "c4-form-password",
      "body": [
          "$$_subtitle_ = [",
          "    'data' => [",
          "'name' => '_subtitle_',",
          "'id' => '_subtitle_',",
          "'class' => 'form-control form-control-sm',",
          "'required' => 'required'",
          "    ],",
          "    'value' => '******',",
          "    'escape' => true",
          "];"
      ],
      "description": "Fomulários para Codeigniter 4"
  },
  "c4-form-radio": {
      "prefix": "c4-form-radio",
      "body": [
          "$$_subtitle_ = [",
          "    'data' => [",
          "'name' => '_subtitle_',",
          "'id' => '_subtitle_',",
          "'value' => '_Label_',",
          "// 'class' => 'form-control form-control-sm',",
          "'checked' => FALSE",
          "    ],",
          "    'escape' => true,",
          "    'set' => [",
          "'label' => '_response_',",
          "    ]",
          "];"
      ],
      "description": "Fomulários para Codeigniter 4"
  },
  "c4-isset": {
      "prefix": "c4-isset",
      "body": [
          "(isset($$var)) ? (NULL) : (NULL);"
      ],
      "description": "Fomulários para Codeigniter 4"
  },
  "c4-form-checkbox": {
      "prefix": "c4-form-checkbox",
      "body": [
          "$$subtitle = [",
          " 'data' => [",
          "   'name' => 'subtitle',",
          "   'id' => 'subtitle'",
          "   'class' => 'form-control form-control-sm',",
          "   ],",
          " 'value' => $$value,",
          " 'checked' => false,",
          " 'escape' => true",
          "];"
      ],
      "description": "Fomulários para Codeigniter 4"
  },
  "c4-valid-token": {
      "prefix": "c4-valid-token",
      "body": [
          "if (releaseAccess($$this->validateToken(), session()->get('system_log'))) {",
          "} else {",
          " return redirect()->to('https://www.funarj.rj.gov.br/');",
          "}"
      ],
      "description": "Fomulários para Codeigniter 4"
  },
  "c4-my-endpoint": {
      "prefix": "c4-my-endpoint",
      "body": [
          "if($$parameter !== NULL){",
          "    $$profile = '/'. $$parameter;",
          "}elseif($$processRequest['id']){",
          "$$profile = '/'. $$processRequest['id'];",
          "}else{",
          "    $$profile = NULL;",
          "}",
          "$$endPoint = myEndPoint('projeto/controler/api/metodo' . $$profile, $$this->token);",
          "myPrint($$endPoint, 'Endpoint');",
          "$$requestJSONform = (isset($$endPoint['result'])) ? ($$endPoint['result']) : (array());"
      ],
      "description": "c4-my-endpoint"
  }
}